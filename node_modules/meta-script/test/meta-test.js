var _$0, _$1;
_$0: {
    require('source-map-support').install();
    _$1: {
    }
    require('should');
    describe('Metascript', function () {
        var _$2, _$3;
        _$3: {
            it('Should evaluate simple expression', function () {
                var _$4;
                if (true) {
                    _$4 = 1;
                } else {
                    _$4 = 2;
                }
                return _$4.should.equal(1);
            });
            it('Should evaluate modulus', function () {
                return (5 % 2).should.equal(1);
            });
            it('Should handle tuple assignments', function () {
                var a, b, _$4, _$5, _$6, _$7, _$8, _$9;
                _$5: {
                    if (true) {
                        _$6 = 1;
                        _$7 = 2;
                    } else {
                        _$6 = 2;
                        _$7 = 1;
                    }
                    a = _$6;
                    b = _$7;
                    a.should.equal(1);
                    b.should.equal(2);
                    _$8 = b;
                    _$9 = a;
                    a = _$8;
                    b = _$9;
                    a.should.equal(2);
                    _$4 = b.should.equal(1);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle operator precedences', function () {
                var obj, b, _$4, _$5;
                _$5: {
                    obj = {
                        'nested': {
                            'm': function () {
                                return 'b';
                            }
                        },
                        'm': function () {
                            return this.nested;
                        }
                    };
                    b = obj.m().m();
                    b.should.equal('b');
                    _$4 = ('a' + obj.m().m()).should.equal('ab');
                    break _$5;
                }
                return _$4;
            });
            it('Should handle loops', function () {
                var f, _$4, _$5;
                _$5: {
                    f = function (x) {
                        var r, _$6, _$7;
                        r = 1;
                        _$7:
                            while (true) {
                                if (x > 0) {
                                    r = r * x;
                                    x = x - 1;
                                    continue;
                                } else {
                                    _$6 = r;
                                    break _$7;
                                }
                                break _$7;
                            }
                        return _$6;
                    };
                    f(1).should.equal(1);
                    f(2).should.equal(2);
                    f(3).should.equal(6);
                    _$4 = f(6).should.equal(6 * 5 * 4 * 3 * 2);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle nested do and if', function () {
                var g, _$4, _$5;
                _$5: {
                    g = function (x, y) {
                        var a, b, _$6, _$7, _$8, _$9, _$10;
                        _$7: {
                            _$10: {
                                if (x > 0) {
                                    _$8 = 1;
                                    _$9 = 2;
                                    break _$10;
                                }
                                if (y > 0) {
                                    _$8 = 3;
                                    _$9 = 6;
                                    break _$10;
                                }
                                if (x + y < 0) {
                                    _$8 = 4;
                                    _$9 = 8;
                                    break _$10;
                                }
                                _$8 = 5;
                                _$9 = 10;
                                break _$10;
                            }
                            a = _$8;
                            b = _$9;
                            return b - a;
                        }
                        return _$6;
                    };
                    g(1, 2).should.equal(1);
                    g(-1, 2).should.equal(3);
                    g(-1, -2).should.equal(4);
                    _$4 = g(NaN, -2).should.equal(5);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle object literals', function () {
                var obj, _$4, _$5;
                _$5: {
                    obj = {
                        'a': 1,
                        'b': 2
                    };
                    obj.should.have.property('a', 1);
                    _$4 = obj.should.have.property('b', 2);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle array literals', function () {
                var arr, _$4, _$5, _$6, _$7;
                _$5: {
                    arr = [
                        1,
                        2,
                        3
                    ];
                    arr.should.have.property(0, 1);
                    arr.should.have.property(1, 2);
                    arr.should.have.property(2, 3);
                    arr.should.have.lengthOf(3);
                    _$6 = arr[2];
                    _$7 = arr[0];
                    arr[0] = _$6;
                    arr[2] = _$7;
                    arr.should.have.property(0, 3);
                    _$4 = arr.should.have.property(2, 1);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle method calls', function () {
                var obj, _$4, _$5;
                _$5: {
                    obj = {
                        'a': 1,
                        'b': 2
                    };
                    obj.m = function () {
                        return this.a + this.b;
                    };
                    _$4 = obj.m().should.equal(3);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle do blocks returning undefined', function () {
                var obj, _$4, _$5;
                _$5: {
                    obj = {
                        'm1': function () {
                            return 1;
                        },
                        'm2': function () {
                            return undefined;
                        },
                        'm3': function () {
                            var _$6, _$7;
                            _$7: {
                                this.m1();
                                _$6 = this.m2();
                                break _$7;
                            }
                            return _$6;
                        }
                    };
                    (typeof obj.m1()).should.equal('number');
                    (typeof obj.m2()).should.equal('undefined');
                    (typeof obj.m3()).should.equal('undefined');
                    obj.m1().should.equal(1);
                    (obj.m2() === undefined).should.equal(true);
                    _$4 = (obj.m3() === undefined).should.equal(true);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle string concatenation', function () {
                var obj, _$4, _$5;
                _$5: {
                    obj = {};
                    obj.world = function () {
                        return 'world!';
                    };
                    ('Hello ' + obj.world()).should.equal('Hello world!');
                    obj = {
                        'world': function () {
                            return 'world!';
                        }
                    };
                    _$4 = ('Hello ' + obj.world()).should.equal('Hello world!');
                    break _$5;
                }
                return _$4;
            });
            it('Should handle constructors', function () {
                var C, c, _$4, _$5;
                _$5: {
                    C = function (a) {
                        return this['if'] = a;
                    };
                    c = new C(4);
                    _$4 = c.should.have.property('if', 4);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle a simple macro', function () {
                var _$4, _$5;
                _$5: {
                    ('moo ' + 42).should.equal('moo 42');
                    ('moo ' + 69).should.equal('moo 69');
                    _$4 = ('moo ' + ('Hello ' + 'meta!')).should.equal('moo Hello meta!');
                    break _$5;
                }
                return _$4;
            });
            it('Should handle a macro involving "this"', function () {
                var obj, _$4, _$5;
                _$5: {
                    obj = {
                        'a': 1,
                        'b': 2,
                        'm': function () {
                            return this.a + this.b;
                        }
                    };
                    _$4 = obj.m().should.equal(3);
                    break _$5;
                }
                return _$4;
            });
            it('Can define a "@" operator', function () {
                var obj, _$4, _$5;
                _$5: {
                    obj = {
                        'a': 1,
                        'b': 2
                    };
                    obj['aaa'] = 42;
                    obj.m1 = function () {
                        return this.a + this.b;
                    };
                    obj.m2 = function (x, y) {
                        return this[x + y];
                    };
                    obj.m1().should.equal(3);
                    _$4 = obj.m2('a', 'aa').should.equal(42);
                    break _$5;
                }
                return _$4;
            });
            it('Should have macros that rename variables', function () {
                var vTagTestN, _$4, _$5, _$6, _$7, result0, _$8, i0, _$9, _$10, _$11, _$12, result1, _$13, i1, _$14, _$15;
                _$5: {
                    _$7: {
                        result0 = [];
                        i0 = 0;
                        _$9:
                            while (true) {
                                if (i0 < 3) {
                                    _$10: {
                                        result0.push(i0);
                                        i0 = i0 + 1;
                                        continue;
                                    }
                                } else {
                                    _$8 = result0;
                                    break _$9;
                                }
                                break _$9;
                            }
                        _$6 = _$8;
                        break _$7;
                    }
                    vTagTestN = _$6;
                    vTagTestN.should.have.length(3);
                    vTagTestN.should.have.property(0, 0);
                    vTagTestN.should.have.property(1, 1);
                    vTagTestN.should.have.property(2, 2);
                    _$12: {
                        result1 = [];
                        i1 = 0;
                        _$14:
                            while (true) {
                                if (i1 < 2) {
                                    _$15: {
                                        result1.push(i1);
                                        i1 = i1 + 1;
                                        continue;
                                    }
                                } else {
                                    _$13 = result1;
                                    break _$14;
                                }
                                break _$14;
                            }
                        _$11 = _$13;
                        break _$12;
                    }
                    vTagTestN = _$11;
                    vTagTestN.should.have.length(2);
                    vTagTestN.should.have.property(0, 0);
                    _$4 = vTagTestN.should.have.property(1, 1);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle the void operator', function () {
                var a, _$4, _$5;
                _$5: {
                    void (a = 1);
                    _$4 = a.should.equal(1);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle external symbols', function () {
                var _$4, _$5;
                _$5: {
                    _$4 = (typeof myExternal === 'undefined').should.equal(true);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle try catch statements', function () {
                var o, c, f, e, _$4, _$5, _$6;
                _$5: {
                    _$6: {
                        o = null;
                        c = false;
                        f = false;
                    }
                    try {
                        o.a = o.b.c;
                    } catch (e) {
                        c = true;
                    } finally {
                        f = true;
                    }
                    c.should.equal(true);
                    _$4 = f.should.equal(true);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle try catch expressions', function () {
                var o, f, c, r, e, _$4, _$5, _$6, _$7, _$8, _$9;
                _$5: {
                    _$6: {
                        o = null;
                        f = false;
                        c = false;
                        try {
                            _$7 = o.a = o.b.c;
                        } catch (e) {
                            _$8: {
                                c = true;
                                _$7 = true;
                                break _$8;
                            }
                        } finally {
                            f = true;
                        }
                        r = _$7;
                    }
                    c.should.equal(true);
                    r.should.equal(true);
                    f.should.equal(true);
                    try {
                        _$9 = false;
                    } catch (e) {
                        _$9 = true;
                    }
                    r = _$9;
                    _$4 = r.should.equal(false);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle giving void do invocations', function () {
                var v, f, _$4, _$5;
                _$5: {
                    v = 0;
                    f = function () {
                        var _$6, _$7, _$8, _$9;
                        _$7: {
                            v = 1;
                            _$9: {
                                _$8 = v = 2;
                                break _$9;
                            }
                            _$6 = _$8;
                            break _$7;
                        }
                        return _$6;
                    };
                    f();
                    _$4 = v.should.equal(2);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle || short circuit', function () {
                var v, t, _$4, _$5, _$6, _$7;
                _$5: {
                    v = 1;
                    if (!true) {
                        _$7: {
                            v = 2;
                            _$6 = false;
                            break _$7;
                        }
                    } else
                        _$6 = true;
                    t = _$6;
                    v.should.equal(1);
                    _$4 = t.should.equal(true);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle || short circuit with do blocks', function () {
                var v, oft, otf, tFt, p1, p2, tTf, _$4, _$5, _$6, _$7, _$8, _$9, _$10, _$11, _$12, _$13;
                _$5: {
                    v = 1;
                    oft = {
                        'p1': false,
                        'p2': true
                    };
                    otf = {
                        'p1': true,
                        'p2': false
                    };
                    _$7: {
                        p1 = oft.p1;
                        v = 1;
                        _$6 = p1 === true;
                        break _$7;
                    }
                    if (!_$6) {
                        _$9: {
                            p2 = oft.p2;
                            v = 2;
                            _$8 = p2 === true;
                            break _$9;
                        }
                    } else
                        _$8 = true;
                    tFt = _$8;
                    v.should.equal(2);
                    tFt.should.equal(true);
                    _$11: {
                        p1 = otf.p1;
                        v = 1;
                        _$10 = p1 === true;
                        break _$11;
                    }
                    if (!_$10) {
                        _$13: {
                            p2 = otf.p2;
                            v = 2;
                            _$12 = p2 === true;
                            break _$13;
                        }
                    } else
                        _$12 = true;
                    tTf = _$12;
                    v.should.equal(1);
                    _$4 = tTf.should.equal(true);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle && short circuit', function () {
                var v, t, _$4, _$5, _$6, _$7;
                _$5: {
                    v = 1;
                    if (false) {
                        _$7: {
                            v = 2;
                            _$6 = true;
                            break _$7;
                        }
                    } else
                        _$6 = false;
                    t = _$6;
                    v.should.equal(1);
                    _$4 = t.should.equal(false);
                    break _$5;
                }
                return _$4;
            });
            it('Should handle && short circuit with do blocks', function () {
                var v, oft, otf, tFt, p1, p2, tTf, _$4, _$5, _$6, _$7, _$8, _$9, _$10, _$11, _$12, _$13;
                _$5: {
                    v = 1;
                    oft = {
                        'p1': false,
                        'p2': true
                    };
                    otf = {
                        'p1': true,
                        'p2': false
                    };
                    _$7: {
                        p1 = oft.p1;
                        v = 1;
                        _$6 = p1 === true;
                        break _$7;
                    }
                    if (_$6) {
                        _$9: {
                            p2 = oft.p2;
                            v = 2;
                            _$8 = p2 === true;
                            break _$9;
                        }
                    } else
                        _$8 = false;
                    tFt = _$8;
                    v.should.equal(1);
                    tFt.should.equal(false);
                    _$11: {
                        p1 = otf.p1;
                        v = 1;
                        _$10 = p1 === true;
                        break _$11;
                    }
                    if (_$10) {
                        _$13: {
                            p2 = otf.p2;
                            v = 2;
                            _$12 = p2 === true;
                            break _$13;
                        }
                    } else
                        _$12 = false;
                    tTf = _$12;
                    v.should.equal(2);
                    _$4 = tTf.should.equal(false);
                    break _$5;
                }
                return _$4;
            });
            it('Can replace tags with arrays inside code', function () {
                var a, _$4, _$5, _$6;
                _$5: {
                    a = 0;
                    _$6: {
                        a += 1;
                        a += 1;
                    }
                    _$4 = a.should.equal(2);
                    break _$5;
                }
                return _$4;
            });
            it('give!s a way out of callback hell', function () {
                var caller, activityLog, log, log1, log2, _$4, _$5, _$6, _$7, thenCallback0, _$8, _$9;
                _$5: {
                    caller = function (f) {
                        return f();
                    };
                    activityLog = [];
                    log = function (x) {
                        return activityLog.push(x);
                    };
                    _$7: {
                        log1 = null;
                        log2 = null;
                        thenCallback0 = null;
                        _$9: {
                            log(0);
                            _$8 = caller(log1 = function () {
                                var _$10, _$11;
                                _$11: {
                                    log(1);
                                    _$10 = caller(log2 = function () {
                                        var _$12, _$13;
                                        _$13: {
                                            log(2);
                                            _$12 = caller(thenCallback0 = function () {
                                                var _$14, _$15, _$16, _$17, thenCallback1, _$18, _$19;
                                                _$15: {
                                                    log(3);
                                                    _$17: {
                                                        thenCallback1 = null;
                                                        _$19: {
                                                            log(4);
                                                            _$18 = caller(thenCallback1 = function () {
                                                                var i, _$20, _$21, _$22, _$23, _$24;
                                                                _$21: {
                                                                    log(5);
                                                                    activityLog.should.have.length(6);
                                                                    i = 0;
                                                                    _$23:
                                                                        while (true) {
                                                                            if (i < activityLog.length) {
                                                                                _$24: {
                                                                                    activityLog[i].should.equal(i);
                                                                                    i = i + 1;
                                                                                    continue;
                                                                                }
                                                                            } else {
                                                                                break _$23;
                                                                            }
                                                                            break _$23;
                                                                        }
                                                                    _$20 = _$22;
                                                                    break _$21;
                                                                }
                                                                return _$20;
                                                            });
                                                            break _$19;
                                                        }
                                                        _$16 = _$18;
                                                        break _$17;
                                                    }
                                                    _$14 = _$16;
                                                    break _$15;
                                                }
                                                return _$14;
                                            });
                                            break _$13;
                                        }
                                        return _$12;
                                    });
                                    break _$11;
                                }
                                return _$10;
                            });
                            break _$9;
                        }
                        _$6 = _$8;
                        break _$7;
                    }
                    _$4 = _$6;
                    break _$5;
                }
                return _$4;
            });
            it('Even has a while statement!', function () {
                var c, r, _$4, _$5, _$6, _$7, _$8, _$9;
                _$5: {
                    _$6: {
                        c = 1;
                        r = '';
                    }
                    _$7:
                        while (true) {
                            if (c <= 3) {
                                _$8: {
                                    _$9: {
                                        r += c;
                                        c = c + 1;
                                    }
                                    continue;
                                }
                            }
                            break _$7;
                        }
                    _$4 = r.should.equal('123');
                    break _$5;
                }
                return _$4;
            });
            it('Still supports simple expressions', function () {
                var a, _$4, _$5, _$6, _$7;
                _$5: {
                    (1 + 2 * 3).should.equal(7);
                    ('a' + 'b' + 'c').should.equal('abc');
                    (typeof (1 + 2)).should.equal('number');
                    (typeof {}).should.equal('object');
                    _$7: {
                        a = 'a';
                        a = a + a;
                        _$6 = a;
                        break _$7;
                    }
                    _$4 = _$6.should.equal('aa');
                    break _$5;
                }
                return _$4;
            });
            it('Can write macros better', function () {
                var obj, _$4, _$5;
                _$5: {
                    obj = {
                        'a': 1,
                        'b': 2,
                        'm': function () {
                            return this.a + this.b;
                        }
                    };
                    _$4 = obj.m().should.equal(3);
                    break _$5;
                }
                return _$4;
            });
            it('Supports readable identifiers', function () {
                var obj, _$4, _$5;
                _$5: {
                    obj = {
                        'a': false,
                        'b': false,
                        'isOk': function () {
                            return this.a && this.b;
                        },
                        'doOk': function () {
                            var _$6, _$7, _$8, _$9;
                            _$7: {
                                _$8 = true;
                                _$9 = true;
                                this.a = _$8;
                                this.b = _$9;
                                _$6 = undefined;
                                break _$7;
                            }
                            return _$6;
                        }
                    };
                    obj.isOk().should.equal(false);
                    obj.isOk().should.equal(false);
                    obj.doOk();
                    obj.isOk().should.equal(true);
                    _$4 = obj.isOk().should.equal(true);
                    break _$5;
                }
                return _$4;
            });
            it('Handles binary keywords properly', function () {
                var result, _$4, _$5, _$6;
                _$5: {
                    if (1 + 1 === 2) {
                        _$6 = true;
                    } else {
                        _$6 = false;
                    }
                    result = _$6;
                    _$4 = result.should.equal(true);
                    break _$5;
                }
                return _$4;
            });
            it('Has a prototype of foreach', function () {
                var c, a, r, idx, v, _$4, _$5, _$6, i0, _$7, _$8, _$9, _$10, i1, _$11, _$12, _$13;
                _$5: {
                    a = [
                        1,
                        2,
                        3
                    ];
                    r = 0;
                    _$6: {
                        i0 = 0;
                        _$7:
                            while (true) {
                                if (i0 < a.length) {
                                    _$8: {
                                        _$9: {
                                            idx = i0;
                                            r += a[idx];
                                        }
                                        i0 = i0 + 1;
                                        continue;
                                    }
                                } else {
                                    break _$7;
                                }
                                break _$7;
                            }
                    }
                    r.should.equal(1 + 2 + 3);
                    r = 0;
                    _$10: {
                        i1 = 3;
                        _$11:
                            while (true) {
                                if (i1 <= 5) {
                                    _$12: {
                                        _$13: {
                                            v = i1;
                                            r += v;
                                        }
                                        i1 = i1 + 1;
                                        continue;
                                    }
                                } else {
                                    break _$11;
                                }
                                break _$11;
                            }
                    }
                    _$4 = r.should.equal(3 + 4 + 5);
                    break _$5;
                }
                return _$4;
            });
            it('Applies element and call precedences correctly', function () {
                var o, _$4, _$5;
                _$5: {
                    o = {
                        'p': {
                            'a': [function (s) {
                                    return s;
                                }],
                            'f': function () {
                                return this.a;
                            },
                            'm': function () {
                                return this.p.a[0]('Hi!').length;
                            }
                        }
                    };
                    o.p.f()[0]('Hi!').should.equal('Hi!');
                    _$4 = o['p']['a'][0]('Hola!').should.equal('Hola!');
                    break _$5;
                }
                return _$4;
            });
            it('Handles call associativity correctly', function () {
                var o, _$4, _$5;
                _$5: {
                    o = {
                        'f1': function (v) {
                            var _$6, _$7;
                            _$7: {
                                v.should.equal(1);
                                _$6 = o.f2;
                                break _$7;
                            }
                            return _$6;
                        },
                        'f2': function (v) {
                            var _$6, _$7;
                            _$7: {
                                v.should.equal(2);
                                _$6 = o.f3;
                                break _$7;
                            }
                            return _$6;
                        },
                        'f3': function (v) {
                            var _$6, _$7;
                            _$7: {
                                v.should.equal(3);
                                _$6 = 4;
                                break _$7;
                            }
                            return _$6;
                        }
                    };
                    _$4 = o.f1(1)(2)(3).should.equal(4);
                    break _$5;
                }
                return _$4;
            });
            it('Supports callable macros', function () {
                return ''.concat('a', 'b', 'c').should.equal('abc');
            });
            it('Handles do blocks with a single value correctly', function () {
                var f, v, _$4, _$5, _$6, _$7;
                _$5: {
                    f = function (v) {
                        var _$6, _$7;
                        _$7: {
                            _$6 = v;
                            break _$7;
                        }
                        return _$6;
                    };
                    f(true).should.equal(true);
                    _$7: {
                        _$6 = 42;
                        break _$7;
                    }
                    v = _$6;
                    _$4 = v.should.equal(42);
                    break _$5;
                }
                return _$4;
            });
            it('Can import macro modules', function () {
                var obj, _$4, _$5;
                _$5: {
                    obj = {
                        'a': 1,
                        'b': 2
                    };
                    obj['aaa'] = 42;
                    obj.m1 = function () {
                        return this.a + this.b;
                    };
                    obj.m2 = function (x, y) {
                        return this[x + y];
                    };
                    obj.m1().should.equal(3);
                    _$4 = obj.m2('a', 'aa').should.equal(42);
                    break _$5;
                }
                return _$4;
            });
            it('Has a threading operator', function () {
                var obj, _$4, _$5;
                _$5: {
                    obj = {
                        'a': {
                            'x': {
                                'v': 42,
                                'get': function (member) {
                                    return this[member];
                                }
                            },
                            'get': function (member) {
                                return this[member];
                            }
                        },
                        'get': function (member) {
                            return this[member];
                        }
                    };
                    obj.a.x.v.should.equal(42);
                    obj.get('a').get('x').get('v').should.equal(42);
                    obj.get('a').get('x').get('v').should.equal(42);
                    obj.get('a').get('x').get('v').should.equal(42);
                    obj.get('a').get('x').get('v').should.equal(42);
                    obj.a.get('x').get('v').should.equal(42);
                    obj.get('a').get('x').v.should.equal(42);
                    _$4 = obj.a.x.get('v').should.equal(42);
                    break _$5;
                }
                return _$4;
            });
            it('Has lambda expressions', function () {
                var f1, f2, f3, f4, _$4, _$5;
                _$5: {
                    f1 = function () {
                        return undefined;
                    };
                    f2 = function () {
                        return undefined;
                    };
                    f3 = function (__$arg$1, __$arg$2) {
                        return __$arg$1 + __$arg$2;
                    };
                    f4 = function (__$arg$1) {
                        return __$arg$1 * 2;
                    };
                    (f1() === undefined).should.equal(true);
                    (f2() === undefined).should.equal(true);
                    f3(1, 2).should.equal(3);
                    _$4 = f4(21).should.equal(42);
                    break _$5;
                }
                return _$4;
            });
            it('Has explicit function calls', function () {
                var f1, f3, r, _$4, _$5;
                _$5: {
                    f1 = function (a) {
                        return a + a;
                    };
                    f3 = function (a, b, c) {
                        return a + b + c;
                    };
                    f3('a', 'b', 'c').should.equal('abc');
                    r = f3(40, 1, 1);
                    r.should.equal(42);
                    f1('a').should.equal('aa');
                    r = f1(1);
                    _$4 = r.should.equal(2);
                    break _$5;
                }
                return _$4;
            });
            it('Does not expand quoted code', function () {
                var x, _$4, _$5;
                _$5: {
                    x = 0;
                    x = 1;
                    x.should.equal(1);
                    x = 2;
                    _$4 = x.should.equal(2);
                    break _$5;
                }
                return _$4;
            });
            it('Can use imported macros in macros', function () {
                return (2 * (2 * 1)).should.equal(4);
            });
            it('Can redefine builtins', function () {
                var p, _$4, _$5;
                _$5: {
                    p = 'P';
                    _$4 = { 'p': p }.p.should.equal('P');
                    break _$5;
                }
                return _$4;
            });
            it('Can handle complex loops', function () {
                var complexLoop, _$4, _$5;
                _$5: {
                    complexLoop = function (start) {
                        var current, result, half, _$6, _$7, _$8, _$9, _$10;
                        current = start;
                        result = '' + current;
                        _$7:
                            while (true) {
                                if (current === 0) {
                                    'BAD';
                                } else {
                                    _$9: {
                                        half = current / 2;
                                        if (half === current - 1) {
                                            _$10 = result;
                                        } else {
                                            current = half;
                                            result = result + current;
                                            continue;
                                        }
                                        _$8 = _$10;
                                        break _$9;
                                    }
                                    _$6 = _$8;
                                    break _$7;
                                }
                                break _$7;
                            }
                        return _$6;
                    };
                    _$4 = complexLoop(4).should.equal('42');
                    break _$5;
                }
                return _$4;
            });
            _$2 = it('Can parse empty lambdas', function () {
                var empty, _$4, _$5;
                _$5: {
                    empty = function () {
                        return undefined;
                    };
                    _$4 = (empty() === undefined).should.equal(true);
                    break _$5;
                }
                return _$4;
            });
            break _$3;
        }
        return _$2;
    });
}