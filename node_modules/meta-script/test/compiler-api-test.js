var should, Meta, mjs, _$0, _$1;
_$0: {
    require('source-map-support').install();
    _$1: {
        should = require('should');
        Meta = require('..');
        mjs = Meta();
    }
    describe('#compilerFromString', function () {
        var _$2, _$3;
        _$3: {
            it('should produce an ast from valid code', function () {
                var compiler, ast, _$4, _$5;
                _$5: {
                    compiler = mjs.compilerFromString('var a = 42');
                    ast = compiler.produceAst();
                    _$4 = ast.type.should.equal('Program');
                    break _$5;
                }
                return _$4;
            });
            it('should report errors for invalid code', function () {
                var compiler, ast, _$4, _$5;
                _$5: {
                    compiler = mjs.compilerFromString('ff');
                    ast = compiler.produceAst();
                    should.not.exist(ast);
                    _$4 = compiler.errors.map(function (e) {
                        return e.message;
                    }).should.eql(['Undeclared identifier "ff"']);
                    break _$5;
                }
                return _$4;
            });
            it('should inherit options set at the meta level', function () {
                var customMjs, compiler, _$4, _$5;
                _$5: {
                    customMjs = Meta();
                    customMjs.options.fullMacroErrors = true;
                    customMjs.options.emitIdentifierStatements = true;
                    compiler = customMjs.compilerFromString('');
                    compiler.options.fullMacroErrors.should.equal(true);
                    _$4 = compiler.options.emitIdentifierStatements.should.equal(true);
                    break _$5;
                }
                return _$4;
            });
            _$2 = describe('options.allowUndeclaredIdentifiers', function () {
                return it('causes the compiler to not emit errors for undeclared identifiers', function () {
                    var customMjs, compiler, ast, javascript, value, _$4, _$5;
                    _$5: {
                        customMjs = Meta();
                        customMjs.options.allowUndeclaredIdentifiers = true;
                        compiler = customMjs.compilerFromString('value = 42');
                        ast = compiler.produceAst();
                        javascript = compiler.generate(ast).code;
                        value = 0;
                        eval(javascript);
                        _$4 = value.should.equal(42);
                        break _$5;
                    }
                    return _$4;
                });
            });
            break _$3;
        }
        return _$2;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9zc2QvbWFzc2kvbWV0YXNjcmlwdC90ZXN0L2NvbXBpbGVyLWFwaS10ZXN0Lm1qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiaW5zdGFsbCIsInNob3VsZCIsIk1ldGEiLCJtanMiLCJkZXNjcmliZSIsIml0IiwiY29tcGlsZXIiLCJjb21waWxlckZyb21TdHJpbmciLCJhc3QiLCJwcm9kdWNlQXN0IiwiXyQ0IiwidHlwZSIsImVxdWFsIiwibm90IiwiZXhpc3QiLCJlcnJvcnMiLCJtYXAiLCJlIiwibWVzc2FnZSIsImVxbCIsImN1c3RvbU1qcyIsIm9wdGlvbnMiLCJmdWxsTWFjcm9FcnJvcnMiLCJ0cnVlIiwiZW1pdElkZW50aWZpZXJTdGF0ZW1lbnRzIiwiXyQyIiwiYWxsb3dVbmRlY2xhcmVkSWRlbnRpZmllcnMiLCJqYXZhc2NyaXB0IiwiZ2VuZXJhdGUiLCJjb2RlIiwidmFsdWUiLCJldmFsIl0sIm1hcHBpbmdzIjoiQUFBQSxJLE1BQUEsRSxJQUFBLEUsR0FBQSxFLEdBQUEsRSxHQUFBLEM7QUFBQTtBQUFBLElBQUFBLE9BQU8sc0JBQXNCLENBQUNDLE9BQU8sR0FBckM7QUFBQSxJQUlBO0FBQUEsUUFDRUMsTUFBTyxHQUFFRixPQUFRLFVBQVYsQ0FEVDtBQUFBLFFBRUVHLElBQUssR0FBRUgsT0FBUSxNQUFWLENBRlA7QUFBQSxRQUdFSSxHQUFJLEdBQUVELElBQUksRUFBTixDQUhOO0FBQUEsS0FKQTtBQUFBLElBU0FFLFFBQUEsQ0FBUyxxQkFBVDtBQUFBLFksR0FBQSxFLEdBQUE7QUFBQSxRQUVFO0FBQUEsWUFBQUMsRUFBQSxDQUFHLHVDQUFIO0FBQUEsb0IsUUFBQSxFLEdBQUEsRSxHQUFBLEUsR0FBQTtBQUFBLGdCQUNFO0FBQUEsb0JBQUFDLFFBQWEsR0FBRUgsR0FBRyxDQUFDSSxrQkFBcUIsY0FBM0IsQ0FBYjtBQUFBLG9CQUNBQyxHQUFRLEdBQUVGLFFBQVEsQ0FBQ0csVUFBVyxFQUF0QixDQURSO0FBQUEsb0JBRXNCQyxHQUFBLEdBQXRCRixHQUFHLENBQUNHLElBQUksQ0FBQ1YsTUFBTSxDQUFDVyxLQUFNLFlBRnRCO0FBQUE7QUFBQSxpQkFERjtBQUFBLHVCQUNFRixHQURGO0FBQUE7QUFBQSxZQUtBTCxFQUFBLENBQUcsdUNBQUg7QUFBQSxvQixRQUFBLEUsR0FBQSxFLEdBQUEsRSxHQUFBO0FBQUEsZ0JBQ0U7QUFBQSxvQkFBQUMsUUFBYSxHQUFFSCxHQUFHLENBQUNJLGtCQUFxQixNQUEzQixDQUFiO0FBQUEsb0JBQ0FDLEdBQVEsR0FBRUYsUUFBUSxDQUFDRyxVQUFXLEVBQXRCLENBRFI7QUFBQSxvQkFFQVIsTUFBTSxDQUFDWSxHQUFHLENBQUNDLEtBQU0sQ0FBQU4sR0FBQSxFQUZqQjtBQUFBLG9CQUlFRSxHQUFBLEdBREZKLFFBQVEsQ0FBQ1MsTUFBTSxDQUFDQyxHQUFHLFdBQUNDLENBQUQ7QUFBQSwrQkFBTUEsQ0FBQyxDQUFDQyxPQUFSO0FBQUEsc0JBQWdCLENBQUNqQixNQUFNLENBQUNrQixHQUN6QyxpQ0FKRjtBQUFBO0FBQUEsaUJBREY7QUFBQSx1QkFDRVQsR0FERjtBQUFBLGVBTEE7QUFBQSxZQVlBTCxFQUFBLENBQUcsOENBQUg7QUFBQSxvQixTQUFBLEUsUUFBQSxFLEdBQUEsRSxHQUFBO0FBQUEsZ0JBQ0U7QUFBQSxvQkFBQWUsU0FBZSxHQUFFbEIsSUFBSSxFQUFOLENBQWY7QUFBQSxvQkFDQWtCLFNBQVUsQ0FBQ0MsT0FBTyxDQUFDQyxlQUFrQixHQUFFQyxJQUFGLENBRHJDO0FBQUEsb0JBRUFILFNBQVUsQ0FBQ0MsT0FBTyxDQUFDRyx3QkFBMkIsR0FBRUQsSUFBRixDQUY5QztBQUFBLG9CQUdBakIsUUFBYSxHQUFFYyxTQUFVLENBQUNiLGtCQUFxQixJQUFsQyxDQUhiO0FBQUEsb0JBSUFELFFBQVEsQ0FBQ2UsT0FBTyxDQUFDQyxlQUFpQixDQUFDckIsTUFBTSxDQUFDVyxLQUFNLENBQUFXLElBQUEsRUFKaEQ7QUFBQSxvQkFLeURiLEdBQUEsR0FBekRKLFFBQVEsQ0FBQ2UsT0FBTyxDQUFDRyx3QkFBMEIsQ0FBQ3ZCLE1BQU0sQ0FBQ1csS0FBTSxDQUFBVyxJQUFBLEVBTHpEO0FBQUE7QUFBQSxpQkFERjtBQUFBLHVCQUNFYixHQURGO0FBQUEsZUFaQTtBQUFBLFlBb0JBZSxHQUFBLEdBQUFyQixRQUFBLENBQVMsb0NBQVQ7QUFBQSx1QkFFRUMsRUFBQSxDQUFHLG1FQUFIO0FBQUEsd0IsU0FBQSxFLFFBQUEsRSxHQUFBLEUsVUFBQSxFLEtBQUEsRSxHQUFBLEUsR0FBQTtBQUFBLG9CQUNFO0FBQUEsd0JBQUFlLFNBQWUsR0FBRWxCLElBQUksRUFBTixDQUFmO0FBQUEsd0JBQ0FrQixTQUFVLENBQUNDLE9BQU8sQ0FBQ0ssMEJBQTZCLEdBQUVILElBQUYsQ0FEaEQ7QUFBQSx3QkFFQWpCLFFBQWEsR0FBRWMsU0FBVSxDQUFDYixrQkFBcUIsY0FBbEMsQ0FGYjtBQUFBLHdCQUdBQyxHQUFRLEdBQUVGLFFBQVEsQ0FBQ0csVUFBVyxFQUF0QixDQUhSO0FBQUEsd0JBSUFrQixVQUFlLEdBQUVyQixRQUFRLENBQUNzQixRQUFRLENBQUFwQixHQUFBLENBQUssQ0FBQ3FCLElBQXpCLENBSmY7QUFBQSx3QkFNQUMsS0FBVSxHQUFFLENBQUYsQ0FOVjtBQUFBLHdCQU9BQyxJQUFlLENBQUFKLFVBQUEsRUFQZjtBQUFBLHdCQVFtQmpCLEdBQUEsR0FBbkJvQixLQUFLLENBQUM3QixNQUFNLENBQUNXLEtBQU0sS0FSbkI7QUFBQTtBQUFBLHFCQURGO0FBQUEsMkJBQ0VGLEdBREY7QUFBQSxrQkFGRjtBQUFBLGVBcEJBO0FBQUE7QUFBQSxTQUZGO0FBQUEsZUFFRWUsR0FGRjtBQUFBLE9BVEE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpLmluc3RhbGwoKVxuXG4jbWV0YWltcG9ydCAnLi9saWIvdGVzdGluZydcblxudmFyXG4gIHNob3VsZCA9IHJlcXVpcmUgJ3Nob3VsZCdcbiAgTWV0YSA9IHJlcXVpcmUgJy4uJ1xuICBtanMgPSBNZXRhKClcblxuZGVzY3JpYmUgJyNjb21waWxlckZyb21TdHJpbmcnXG5cbiAgaXQgJ3Nob3VsZCBwcm9kdWNlIGFuIGFzdCBmcm9tIHZhbGlkIGNvZGUnXG4gICAgdmFyIGNvbXBpbGVyID0gbWpzLmNvbXBpbGVyLWZyb20tc3RyaW5nICd2YXIgYSA9IDQyJ1xuICAgIHZhciBhc3QgPSBjb21waWxlci5wcm9kdWNlLWFzdCgpXG4gICAgYXN0LnR5cGUuc2hvdWxkLmVxdWFsICdQcm9ncmFtJ1xuXG4gIGl0ICdzaG91bGQgcmVwb3J0IGVycm9ycyBmb3IgaW52YWxpZCBjb2RlJ1xuICAgIHZhciBjb21waWxlciA9IG1qcy5jb21waWxlci1mcm9tLXN0cmluZyAnZmYnXG4gICAgdmFyIGFzdCA9IGNvbXBpbGVyLnByb2R1Y2UtYXN0KClcbiAgICBzaG91bGQubm90LmV4aXN0IGFzdFxuICAgIGNvbXBpbGVyLmVycm9ycy5tYXAoZSAtPiBlLm1lc3NhZ2UpLnNob3VsZC5lcWxcbiAgICAgIFsnVW5kZWNsYXJlZCBpZGVudGlmaWVyIFwiZmZcIiddXG5cbiAgaXQgJ3Nob3VsZCBpbmhlcml0IG9wdGlvbnMgc2V0IGF0IHRoZSBtZXRhIGxldmVsJ1xuICAgIHZhciBjdXN0b20tbWpzID0gTWV0YSgpXG4gICAgY3VzdG9tLW1qcy5vcHRpb25zLmZ1bGwtbWFjcm8tZXJyb3JzID0gdHJ1ZVxuICAgIGN1c3RvbS1tanMub3B0aW9ucy5lbWl0LWlkZW50aWZpZXItc3RhdGVtZW50cyA9IHRydWVcbiAgICB2YXIgY29tcGlsZXIgPSBjdXN0b20tbWpzLmNvbXBpbGVyLWZyb20tc3RyaW5nICcnXG4gICAgY29tcGlsZXIub3B0aW9ucy5mdWxsLW1hY3JvLWVycm9ycy5zaG91bGQuZXF1YWwgdHJ1ZVxuICAgIGNvbXBpbGVyLm9wdGlvbnMuZW1pdC1pZGVudGlmaWVyLXN0YXRlbWVudHMuc2hvdWxkLmVxdWFsIHRydWVcblxuICBkZXNjcmliZSAnb3B0aW9ucy5hbGxvd1VuZGVjbGFyZWRJZGVudGlmaWVycydcblxuICAgIGl0ICdjYXVzZXMgdGhlIGNvbXBpbGVyIHRvIG5vdCBlbWl0IGVycm9ycyBmb3IgdW5kZWNsYXJlZCBpZGVudGlmaWVycydcbiAgICAgIHZhciBjdXN0b20tbWpzID0gTWV0YSgpXG4gICAgICBjdXN0b20tbWpzLm9wdGlvbnMuYWxsb3ctdW5kZWNsYXJlZC1pZGVudGlmaWVycyA9IHRydWVcbiAgICAgIHZhciBjb21waWxlciA9IGN1c3RvbS1tanMuY29tcGlsZXItZnJvbS1zdHJpbmcgJ3ZhbHVlID0gNDInXG4gICAgICB2YXIgYXN0ID0gY29tcGlsZXIucHJvZHVjZS1hc3QoKVxuICAgICAgdmFyIGphdmFzY3JpcHQgPSBjb21waWxlci5nZW5lcmF0ZShhc3QpLmNvZGVcblxuICAgICAgdmFyIHZhbHVlID0gMFxuICAgICAgI2V4dGVybmFsIGV2YWwgamF2YXNjcmlwdFxuICAgICAgdmFsdWUuc2hvdWxkLmVxdWFsIDQyXG5cbiJdfQ==