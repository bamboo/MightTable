var _$0;
_$0: {
    module;
    module.exports = function (ast) {
        var inspect, applySelectors, buildDeconstructedAssignment, buildPatternTest, oldObjectSymbol, newObjectSymbol, _$1, _$2, _$3, _$4, _$5;
        _$2: {
            _$3: {
                inspect = require('util').inspect;
                applySelectors = function (expr, selectors) {
                    var result, i, selector, _$4, _$5, _$6, _$7, _$8, _$9, codeTag0, _$10, _$11, codeTag1;
                    _$5: {
                        result = expr.copy();
                        i = 0;
                        _$6:
                            while (true) {
                                if (i < selectors.length) {
                                    _$7: {
                                        selector = selectors[i].copy();
                                        if (selector.isValue()) {
                                            _$9: {
                                                codeTag0 = ast.fromJsonString('{"id":"<element>","kind":"builtin","val":null,"loc":{"source":"macros.mjs","start":{"line":11,"column":20},"end":{"line":11,"column":46}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"macros.mjs","start":{"line":11,"column":21},"end":{"line":11,"column":31}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"macros.mjs","start":{"line":11,"column":34},"end":{"line":11,"column":34}},"args":[]}]}');
                                                codeTag0.replaceTag('unquote1', result);
                                                codeTag0.replaceTag('unquote2', selector);
                                                _$8 = codeTag0;
                                                break _$9;
                                            }
                                            result = _$8;
                                        } else {
                                            if (selector.isTag()) {
                                                _$11: {
                                                    codeTag1 = ast.fromJsonString('{"id":".","kind":"builtin","val":".","loc":{"source":"macros.mjs","start":{"line":13,"column":20},"end":{"line":13,"column":48}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"macros.mjs","start":{"line":13,"column":21},"end":{"line":13,"column":31}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"macros.mjs","start":{"line":13,"column":35},"end":{"line":13,"column":47}},"args":[]}]}');
                                                    codeTag1.replaceTag('unquote1', result);
                                                    codeTag1.replaceTag('unquote2', selector);
                                                    _$10 = codeTag1;
                                                    break _$11;
                                                }
                                                result = _$10;
                                            } else {
                                                selector.error('Invalid destructuring selector');
                                            }
                                        }
                                        i = i + 1;
                                        continue;
                                    }
                                }
                                break _$6;
                            }
                        _$4 = result;
                        break _$5;
                    }
                    return _$4;
                };
                buildDeconstructedAssignment = function (assignment) {
                    var value, pattern, deconstructPattern, deconstructedPattern, resultLeft, resultRight, tmpValue, result, _$4, _$5, _$6, _$7, codeTag0, _$8, _$9, codeTag1;
                    _$5: {
                        value = assignment.pop();
                        pattern = assignment.pop();
                        deconstructPattern = function (pattern) {
                            var result, i, element, elementValues, _$6, _$7, _$8, _$9, _$10, _$11;
                            _$7: {
                                result = [];
                                if (pattern.isObject()) {
                                    _$8: {
                                        pattern.forEach(function (__$arg$1) {
                                            var key, memberValues, _$9, _$10, _$11;
                                            _$10: {
                                                if (__$arg$1.isProperty()) {
                                                    _$11: {
                                                        key = __$arg$1.at(0).copy();
                                                        memberValues = deconstructPattern(__$arg$1.at(1));
                                                        memberValues.forEach(function (__$arg$1) {
                                                            var _$12, _$13;
                                                            _$13: {
                                                                __$arg$1.selectors.unshift(key);
                                                                _$12 = result.push(__$arg$1);
                                                                break _$13;
                                                            }
                                                            return _$12;
                                                        });
                                                    }
                                                } else {
                                                    __$arg$1.error('Property expected');
                                                }
                                                _$9 = undefined;
                                                break _$10;
                                            }
                                            return _$9;
                                        });
                                        undefined;
                                    }
                                } else {
                                    if (pattern.isArray()) {
                                        _$9: {
                                            i = 0;
                                            _$10:
                                                while (true) {
                                                    if (i < pattern.count) {
                                                        _$11: {
                                                            element = pattern.at(i);
                                                            elementValues = deconstructPattern(element);
                                                            elementValues.forEach(function (__$arg$1) {
                                                                var _$12, _$13, _$14;
                                                                _$13: {
                                                                    if (!(element.isTag() && element.getTag() === 'undefined')) {
                                                                        _$14: {
                                                                            __$arg$1.selectors.unshift(element.newValue(i));
                                                                            result.push(__$arg$1);
                                                                        }
                                                                    }
                                                                    _$12 = undefined;
                                                                    break _$13;
                                                                }
                                                                return _$12;
                                                            });
                                                            i = i + 1;
                                                            continue;
                                                        }
                                                    }
                                                    break _$10;
                                                }
                                            undefined;
                                        }
                                    } else {
                                        result.push({
                                            'selectors': [],
                                            'value': pattern.copy()
                                        });
                                    }
                                }
                                _$6 = result;
                                break _$7;
                            }
                            return _$6;
                        };
                        deconstructedPattern = deconstructPattern(pattern);
                        resultLeft = assignment.newTuple();
                        resultRight = assignment.newTuple();
                        _$7: {
                            codeTag0 = ast.fromJsonString('{"id":"<vTag>","kind":"tag","val":"tmp-value","loc":{"source":"macros.mjs","start":{"line":55,"column":22},"end":{"line":55,"column":23}},"args":[]}');
                            _$6 = codeTag0;
                            break _$7;
                        }
                        tmpValue = _$6;
                        deconstructedPattern.forEach(function (__$arg$1) {
                            var right, selector, _$8, _$9, _$10, _$11, _$12, _$13, _$14, codeTag1, _$15, _$16, codeTag2, _$17, _$18, _$19, codeTag3;
                            _$9: {
                                resultLeft.push(__$arg$1.value);
                                right = tmpValue.copy();
                                _$10:
                                    while (true) {
                                        if (__$arg$1.selectors.length > 0) {
                                            _$11: {
                                                _$12: {
                                                    selector = __$arg$1.selectors.shift();
                                                    if (selector.isValue()) {
                                                        _$14: {
                                                            codeTag1 = ast.fromJsonString('{"id":"<element>","kind":"builtin","val":null,"loc":{"source":"macros.mjs","start":{"line":62,"column":19},"end":{"line":62,"column":44}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"macros.mjs","start":{"line":62,"column":21},"end":{"line":62,"column":29}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"macros.mjs","start":{"line":62,"column":32},"end":{"line":62,"column":32}},"args":[]}]}');
                                                            codeTag1.replaceTag('unquote1', right);
                                                            codeTag1.replaceTag('unquote2', selector);
                                                            _$13 = codeTag1;
                                                            break _$14;
                                                        }
                                                        right = _$13;
                                                    } else {
                                                        if (selector.isTag()) {
                                                            _$16: {
                                                                codeTag2 = ast.fromJsonString('{"id":".","kind":"builtin","val":".","loc":{"source":"macros.mjs","start":{"line":64,"column":19},"end":{"line":64,"column":46}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"macros.mjs","start":{"line":64,"column":21},"end":{"line":64,"column":29}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"macros.mjs","start":{"line":64,"column":33},"end":{"line":64,"column":45}},"args":[]}]}');
                                                                codeTag2.replaceTag('unquote1', right);
                                                                codeTag2.replaceTag('unquote2', selector);
                                                                _$15 = codeTag2;
                                                                break _$16;
                                                            }
                                                            right = _$15;
                                                        } else {
                                                            _$17: {
                                                                selector.error('Invalid destructuring selector');
                                                                _$19: {
                                                                    codeTag3 = ast.fromJsonString('{"id":"<element>","kind":"builtin","val":null,"loc":{"source":"macros.mjs","start":{"line":67,"column":19},"end":{"line":67,"column":42}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"macros.mjs","start":{"line":67,"column":21},"end":{"line":67,"column":29}},"args":[]},{"id":"<tag>","kind":"tag","val":"undefined","loc":{"source":"macros.mjs","start":{"line":67,"column":31},"end":{"line":67,"column":41}},"args":[]}]}');
                                                                    codeTag3.replaceTag('unquote1', right);
                                                                    _$18 = codeTag3;
                                                                    break _$19;
                                                                }
                                                                right = _$18;
                                                            }
                                                        }
                                                    }
                                                }
                                                continue;
                                            }
                                        }
                                        break _$10;
                                    }
                                _$8 = resultRight.push(right);
                                break _$9;
                            }
                            return _$8;
                        });
                        assignment.push(resultLeft);
                        assignment.push(resultRight);
                        _$9: {
                            codeTag1 = ast.fromJsonString('{"id":"<do>","kind":"builtin","val":null,"loc":{"source":"macros.mjs","start":{"line":72,"column":19},"end":{"line":76,"column":4}},"args":[{"id":"=","kind":"builtin","val":"=","loc":{"source":"macros.mjs","start":{"line":73,"column":21},"end":{"line":73,"column":21}},"args":[{"id":"<vTagDeclaration>","kind":"tag","val":"tmp-value","loc":{"source":"macros.mjs","start":{"line":73,"column":6},"end":{"line":73,"column":11}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"macros.mjs","start":{"line":73,"column":23},"end":{"line":73,"column":23}},"args":[]}]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"macros.mjs","start":{"line":74,"column":6},"end":{"line":74,"column":6}},"args":[]},{"id":"<vTag>","kind":"tag","val":"tmp-value","loc":{"source":"macros.mjs","start":{"line":75,"column":6},"end":{"line":75,"column":7}},"args":[]}]}');
                            codeTag1.replaceTag('unquote1', value);
                            codeTag1.replaceTag('unquote2', assignment);
                            _$8 = codeTag1;
                            break _$9;
                        }
                        result = _$8;
                        result.resolveVirtual();
                        _$4 = result;
                        break _$5;
                    }
                    return _$4;
                };
                buildPatternTest = function (pattern) {
                    var processPattern, testTree, testTreePrinter, tests, varIndex, processTestTree, result, i, _$4, _$5, _$6, _$7, _$8, _$9, codeTag0;
                    _$5: {
                        processPattern = function (pattern) {
                            var result, i, element, _$6, _$7, _$8, _$9, _$10, _$11;
                            _$7: {
                                result = [];
                                if (pattern.isObject()) {
                                    _$8: {
                                        pattern.forEach(function (__$arg$1) {
                                            var _$9, _$10;
                                            _$10: {
                                                if (__$arg$1.isProperty()) {
                                                    result.push({
                                                        'selector': __$arg$1.at(0).copy(),
                                                        'children': processPattern(__$arg$1.at(1))
                                                    });
                                                } else {
                                                    __$arg$1.error('Property expected');
                                                }
                                                _$9 = undefined;
                                                break _$10;
                                            }
                                            return _$9;
                                        });
                                        undefined;
                                    }
                                } else {
                                    if (pattern.isArray()) {
                                        _$9: {
                                            i = 0;
                                            _$10:
                                                while (true) {
                                                    if (i < pattern.count) {
                                                        _$11: {
                                                            element = pattern.at(i);
                                                            if (!(element.isTag() && element.getTag() === 'undefined')) {
                                                                result.push({
                                                                    'selector': pattern.newValue(i),
                                                                    'children': processPattern(element)
                                                                });
                                                            }
                                                            i = i + 1;
                                                            continue;
                                                        }
                                                    }
                                                    break _$10;
                                                }
                                            undefined;
                                        }
                                    }
                                }
                                _$6 = result;
                                break _$7;
                            }
                            return _$6;
                        };
                        testTree = processPattern(pattern);
                        console.log('TEST TREE START');
                        testTreePrinter = function (node, indent) {
                            var _$6, _$7;
                            _$7: {
                                if (indent === undefined) {
                                    indent = '';
                                }
                                _$6 = node.forEach(function (__$arg$1) {
                                    var _$8, _$9;
                                    _$9: {
                                        console.log(indent + 'selector: ' + __$arg$1.selector);
                                        _$8 = testTreePrinter(__$arg$1.children, indent + '  ');
                                        break _$9;
                                    }
                                    return _$8;
                                });
                                break _$7;
                            }
                            return _$6;
                        };
                        testTreePrinter(testTree);
                        console.log('TEST TREE END');
                        tests = [];
                        varIndex = 0;
                        processTestTree = function (varName, selector, treeNode) {
                            var needsDeepCheck, varExpr, newVarName, test, newVarExpr, _$6, _$7, _$8, _$9, codeTag0, _$10, _$11, codeTag1, _$12, _$13, _$14, codeTag2, _$15, _$16, _$17, _$18, codeTag3, _$19, codeTag4;
                            _$7: {
                                needsDeepCheck = treeNode.length > 0;
                                ++varIndex;
                                varExpr = pattern.newVirtualTag(varName);
                                if (selector !== null) {
                                    if (selector.isValue()) {
                                        _$9: {
                                            codeTag0 = ast.fromJsonString('{"id":"<element>","kind":"builtin","val":null,"loc":{"source":"macros.mjs","start":{"line":129,"column":22},"end":{"line":129,"column":50}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"macros.mjs","start":{"line":129,"column":24},"end":{"line":129,"column":35}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"macros.mjs","start":{"line":129,"column":38},"end":{"line":129,"column":38}},"args":[]}]}');
                                            codeTag0.replaceTag('unquote1', varExpr);
                                            codeTag0.replaceTag('unquote2', selector);
                                            _$8 = codeTag0;
                                            break _$9;
                                        }
                                        varExpr = _$8;
                                    } else {
                                        if (selector.isTag()) {
                                            _$11: {
                                                codeTag1 = ast.fromJsonString('{"id":".","kind":"builtin","val":".","loc":{"source":"macros.mjs","start":{"line":131,"column":22},"end":{"line":131,"column":52}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"macros.mjs","start":{"line":131,"column":24},"end":{"line":131,"column":35}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"macros.mjs","start":{"line":131,"column":39},"end":{"line":131,"column":51}},"args":[]}]}');
                                                codeTag1.replaceTag('unquote1', varExpr);
                                                codeTag1.replaceTag('unquote2', selector);
                                                _$10 = codeTag1;
                                                break _$11;
                                            }
                                            varExpr = _$10;
                                        } else {
                                            _$12: {
                                                selector.error('Invalid destructuring selector');
                                                _$14: {
                                                    codeTag2 = ast.fromJsonString('{"id":"<element>","kind":"builtin","val":null,"loc":{"source":"macros.mjs","start":{"line":134,"column":22},"end":{"line":134,"column":48}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"macros.mjs","start":{"line":134,"column":24},"end":{"line":134,"column":35}},"args":[]},{"id":"<tag>","kind":"tag","val":"undefined","loc":{"source":"macros.mjs","start":{"line":134,"column":37},"end":{"line":134,"column":47}},"args":[]}]}');
                                                    codeTag2.replaceTag('unquote1', varExpr);
                                                    _$13 = codeTag2;
                                                    break _$14;
                                                }
                                                varExpr = _$13;
                                            }
                                        }
                                    }
                                }
                                newVarName = 'dstrct-tmp-' + varIndex;
                                if (needsDeepCheck) {
                                    _$16: {
                                        newVarExpr = pattern.newVirtualTag(newVarName);
                                        _$18: {
                                            codeTag3 = ast.fromJsonString('{"id":"#no-new-scope","kind":"macro","val":"#no-new-scope","loc":{"source":"macros.mjs","start":{"line":139,"column":12},"end":{"line":139,"column":12}},"args":[{"id":"<do>","kind":"builtin","val":null,"loc":{"source":"macros.mjs","start":{"line":139,"column":26},"end":{"line":142,"column":8}},"args":[{"id":"=","kind":"builtin","val":"=","loc":{"source":"macros.mjs","start":{"line":140,"column":55},"end":{"line":140,"column":55}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"macros.mjs","start":{"line":140,"column":14},"end":{"line":140,"column":53}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"macros.mjs","start":{"line":140,"column":57},"end":{"line":140,"column":69}},"args":[]}]},{"id":"&&","kind":"builtin","val":"&&","loc":{"source":"macros.mjs","start":{"line":141,"column":14},"end":{"line":141,"column":87}},"args":[{"id":"!=","kind":"builtin","val":"!=","loc":{"source":"macros.mjs","start":{"line":141,"column":41},"end":{"line":141,"column":41}},"args":[{"id":"typeof","kind":"builtin","val":"typeof","loc":{"source":"macros.mjs","start":{"line":141,"column":15},"end":{"line":141,"column":39}},"args":[{"id":"<tag>","kind":"tag","val":"unquote3","loc":{"source":"macros.mjs","start":{"line":141,"column":22},"end":{"line":141,"column":38}},"args":[]}]},{"id":"<value>","kind":"value","val":"undefined","loc":{"source":"macros.mjs","start":{"line":141,"column":44},"end":{"line":141,"column":54}},"args":[]}]},{"id":"!=","kind":"builtin","val":"!=","loc":{"source":"macros.mjs","start":{"line":141,"column":79},"end":{"line":141,"column":79}},"args":[{"id":"<vTag>","kind":"tag","val":"unquote4","loc":{"source":"macros.mjs","start":{"line":141,"column":59},"end":{"line":141,"column":77}},"args":[]},{"id":"<tag>","kind":"tag","val":"null","loc":{"source":"macros.mjs","start":{"line":141,"column":82},"end":{"line":141,"column":82}},"args":[]}]}]}]}]}');
                                            codeTag3.replaceTag('unquote1', newVarExpr.copyToTagDeclaration());
                                            codeTag3.replaceTag('unquote2', varExpr);
                                            codeTag3.replaceTag('unquote3', newVarExpr);
                                            codeTag3.replaceTag('unquote4', newVarExpr);
                                            _$17 = codeTag3;
                                            break _$18;
                                        }
                                        _$15 = _$17;
                                        break _$16;
                                    }
                                } else {
                                    _$19: {
                                        codeTag4 = ast.fromJsonString('{"id":"!=","kind":"builtin","val":"!=","loc":{"source":"macros.mjs","start":{"line":143,"column":12},"end":{"line":143,"column":47}},"args":[{"id":"typeof","kind":"builtin","val":"typeof","loc":{"source":"macros.mjs","start":{"line":143,"column":13},"end":{"line":143,"column":33}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"macros.mjs","start":{"line":143,"column":20},"end":{"line":143,"column":32}},"args":[]}]},{"id":"<tag>","kind":"tag","val":"undefined","loc":{"source":"macros.mjs","start":{"line":143,"column":38},"end":{"line":143,"column":38}},"args":[]}]}');
                                        codeTag4.replaceTag('unquote1', varExpr);
                                        _$15 = codeTag4;
                                        break _$19;
                                    }
                                }
                                test = _$15;
                                tests.push(test);
                                _$6 = treeNode.forEach(function (__$arg$1) {
                                    return processTestTree(newVarName, __$arg$1.selector, __$arg$1.children);
                                });
                                break _$7;
                            }
                            return _$6;
                        };
                        console.log('PROCESSING TREE: ' + testTree.length);
                        processTestTree('initial-value', null, testTree);
                        result = tests[0];
                        i = 1;
                        _$6:
                            while (true) {
                                if (i < tests.length) {
                                    _$7: {
                                        _$9: {
                                            codeTag0 = ast.fromJsonString('{"id":"&&","kind":"builtin","val":"&&","loc":{"source":"macros.mjs","start":{"line":161,"column":31},"end":{"line":161,"column":31}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"macros.mjs","start":{"line":161,"column":19},"end":{"line":161,"column":29}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"macros.mjs","start":{"line":161,"column":34},"end":{"line":161,"column":46}},"args":[]}]}');
                                            codeTag0.replaceTag('unquote1', result);
                                            codeTag0.replaceTag('unquote2', tests[i]);
                                            _$8 = codeTag0;
                                            break _$9;
                                        }
                                        result = _$8;
                                        i = i + 1;
                                        continue;
                                    }
                                }
                                break _$6;
                            }
                        result.resolveVirtual();
                        _$4 = result;
                        break _$5;
                    }
                    return _$4;
                };
                oldObjectSymbol = ast.resolveInParentKeyScope('<object>');
                newObjectSymbol = ast.createExtension(oldObjectSymbol, function (ast) {
                    var properties, _$4, _$5, _$6, _$7, codeTag0;
                    _$5: {
                        properties = ast.map(function (__$arg$1) {
                            var m, _$6, _$7, codeTag0, _$8, _$9, _$10, _$11, _$12, _$13, codeTag1, _$14, _$15, _$16, codeTag2;
                            if (__$arg$1.isProperty()) {
                                _$6 = __$arg$1;
                            } else {
                                if (__$arg$1.isTag()) {
                                    _$7: {
                                        codeTag0 = ast.fromJsonString('{"id":":","kind":"builtin","val":":","loc":{"source":"macros.mjs","start":{"line":175,"column":21},"end":{"line":175,"column":21}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"macros.mjs","start":{"line":175,"column":12},"end":{"line":175,"column":19}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"macros.mjs","start":{"line":175,"column":23},"end":{"line":175,"column":30}},"args":[]}]}');
                                        codeTag0.replaceTag('unquote1', __$arg$1);
                                        codeTag0.replaceTag('unquote2', __$arg$1);
                                        _$6 = codeTag0;
                                        break _$7;
                                    }
                                } else {
                                    _$8: {
                                        m = __$arg$1;
                                        _$9:
                                            while (true) {
                                                if (m.isMember()) {
                                                    _$10: {
                                                        _$11: {
                                                            m = m.at(1);
                                                        }
                                                        continue;
                                                    }
                                                }
                                                break _$9;
                                            }
                                        if (m.isTag()) {
                                            _$13: {
                                                codeTag1 = ast.fromJsonString('{"id":":","kind":"builtin","val":":","loc":{"source":"macros.mjs","start":{"line":181,"column":21},"end":{"line":181,"column":21}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"macros.mjs","start":{"line":181,"column":14},"end":{"line":181,"column":19}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"macros.mjs","start":{"line":181,"column":23},"end":{"line":181,"column":30}},"args":[]}]}');
                                                codeTag1.replaceTag('unquote1', m);
                                                codeTag1.replaceTag('unquote2', __$arg$1);
                                                _$12 = codeTag1;
                                                break _$13;
                                            }
                                        } else {
                                            _$14: {
                                                __$arg$1.error('Invalid property');
                                                _$16: {
                                                    codeTag2 = ast.fromJsonString('{"id":"<tag>","kind":"tag","val":"undefined","loc":{"source":"macros.mjs","start":{"line":184,"column":14},"end":{"line":184,"column":14}},"args":[]}');
                                                    _$15 = codeTag2;
                                                    break _$16;
                                                }
                                                _$12 = _$15;
                                                break _$14;
                                            }
                                        }
                                        _$6 = _$12;
                                        break _$8;
                                    }
                                }
                            }
                            return _$6;
                        });
                        _$7: {
                            codeTag0 = ast.fromJsonString('{"id":"<object>","kind":"builtin","val":null,"loc":{"source":"macros.mjs","start":{"line":185,"column":7},"end":{"line":185,"column":25}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"macros.mjs","start":{"line":185,"column":7},"end":{"line":185,"column":25}},"args":[]}]}');
                            codeTag0.replaceTag('unquote1', properties);
                            _$6 = codeTag0;
                            break _$7;
                        }
                        _$4 = _$6;
                        break _$5;
                    }
                    return _$4;
                });
                ast.defineSymbol(newObjectSymbol);
                _$4: {
                    ast.defineSymbol(ast.createMacro('#deconstruct', 'unary', 'LOW', {
                        'expand': function (ast) {
                            var arg, result, _$5, _$6;
                            _$6: {
                                arg = ast.at(0);
                                console.log('DECONSTRUCT EXPR: ' + arg.printAst());
                                result = ast.compiler.metaEnv.deconstruct(arg);
                                console.log('DECONSTRUCT DONE: ' + result.printAst());
                                _$5 = null;
                                break _$6;
                            }
                            return _$5;
                        }
                    }));
                    null;
                }
                _$5: {
                    ast.defineSymbol(ast.createMacro('#test-pattern', 'unary', 'LOW', {
                        'expand': function (ast) {
                            var arg, result, _$6, _$7;
                            _$7: {
                                arg = ast.at(0);
                                console.log('TEST PATTERN EXPR: ' + arg.printAst());
                                result = ast.compiler.metaEnv.testPattern(arg);
                                _$6 = null;
                                break _$7;
                            }
                            return _$6;
                        }
                    }));
                    null;
                }
                ast.compiler.metaEnv.deconstruct = buildDeconstructedAssignment;
                ast.compiler.metaEnv.testPattern = buildPatternTest;
            }
            _$1 = null;
            break _$2;
        }
        return _$1;
    };
}
//# sourceMappingURL=data:application/json;base64,