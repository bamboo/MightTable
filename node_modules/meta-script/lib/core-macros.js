var _$0;
_$0: {
    module.exports = function (ast) {
        var composeMacroArguments, _$1, _$2, _$3, _$4, _$5, _$6, _$7, _$8, _$9, _$10, _$11, _$12, _$13, _$14, _$15, _$16, _$17, _$18, _$19, _$20, _$21;
        _$2: {
            _$3: {
                composeMacroArguments = function (nameArg, argsTuple) {
                    var nameValue, ok, name, arity, precedence, options, index, arg, simpleValue, skip, property, value, propertyName, simplePropertyValue, func, macroBody, macroArgs, argIndex, macroArg, argDeclaration, _$4, _$5, _$6, _$7, _$8, _$9, _$10, _$11, _$12, _$13, _$14, _$15, _$16, _$17, _$18, _$19, _$20, _$21, _$22;
                    _$5: {
                        nameValue = nameArg.getSimpleValue();
                        if (nameValue === null) {
                            _$6: {
                                argsTuple.error('Invalid name argument');
                                return null;
                            }
                        }
                        if (!argsTuple.isTuple()) {
                            _$7: {
                                argsTuple.error('Expected tuple argument');
                                return null;
                            }
                        }
                        _$8: {
                            ok = true;
                            name = nameArg.newValue(nameValue);
                            arity = ast.newValue('unary');
                            precedence = ast.newValue('LOW');
                            options = ast.newObjectLiteral();
                        }
                        index = 0;
                        _$9:
                            while (true) {
                                if (index < argsTuple.count) {
                                    _$10: {
                                        arg = argsTuple.at(index);
                                        simpleValue = arg.getSimpleValue();
                                        if (simpleValue !== null) {
                                            if (index === 0) {
                                                arity = arg.newValue(simpleValue);
                                            } else {
                                                if (index === 1) {
                                                    precedence = arg.newValue(simpleValue);
                                                } else {
                                                    _$11: {
                                                        arg.error('Invalid simple property');
                                                        ok = false;
                                                    }
                                                }
                                            }
                                        } else {
                                            if (arg.isProperty()) {
                                                _$12: {
                                                    skip = false;
                                                    property = arg.copy();
                                                    value = property.at(1);
                                                    propertyName = property.at(0).getSimpleValue();
                                                    simplePropertyValue = value.getSimpleValue();
                                                    if (propertyName === 'arity' && simplePropertyValue !== null) {
                                                        _$13: {
                                                            arity = arg.newValue(simplePropertyValue);
                                                            skip = true;
                                                        }
                                                    } else {
                                                        if (propertyName === 'precedence' && simplePropertyValue !== null) {
                                                            _$14: {
                                                                precedence = arg.newValue(simplePropertyValue);
                                                                skip = true;
                                                            }
                                                        } else {
                                                            if (value.isFunctionDefinition()) {
                                                                _$15: {
                                                                    func = value.copy();
                                                                    macroBody = func.pop().asTuple();
                                                                    macroArgs = func.pop().asTuple();
                                                                    func.push(arg.newTag('ast'));
                                                                    func.push(macroBody);
                                                                    argIndex = 0;
                                                                    _$16:
                                                                        while (true) {
                                                                            if (argIndex < macroArgs.count) {
                                                                                _$17: {
                                                                                    macroArg = macroArgs.at(argIndex);
                                                                                    if (macroArg.isTag()) {
                                                                                        _$18: {
                                                                                            argDeclaration = ast.fromJsonString('{"id":"=","kind":"builtin","val":"=","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":54,"column":60},"end":{"line":54,"column":60}},"args":[{"id":"<tagDeclaration>","kind":"tag","val":"__argName","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":54,"column":46},"end":{"line":54,"column":50}},"args":[]},{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":54,"column":69},"end":{"line":54,"column":69}},"args":[{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":54,"column":65},"end":{"line":54,"column":65}},"args":[{"id":"<tag>","kind":"tag","val":"ast","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":54,"column":62},"end":{"line":54,"column":62}},"args":[]},{"id":"<name>","kind":"tag","val":"at","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":54,"column":66},"end":{"line":54,"column":66}},"args":[]}]},{"id":"<tag>","kind":"tag","val":"__argIndex","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":54,"column":69},"end":{"line":54,"column":69}},"args":[]}]}]}');
                                                                                            argDeclaration.replaceTag('__argName', macroArg.newTag(macroArg.getTag()).handleAsTagDeclaration());
                                                                                            argDeclaration.replaceTag('__argIndex', macroArg.newValue(argIndex));
                                                                                            macroBody.unshift(argDeclaration);
                                                                                        }
                                                                                    } else {
                                                                                        _$19: {
                                                                                            macroArg.error('Argument name expected');
                                                                                            ok = false;
                                                                                        }
                                                                                    }
                                                                                    argIndex = argIndex + 1;
                                                                                    continue;
                                                                                }
                                                                            }
                                                                            break _$16;
                                                                        }
                                                                    if (ok) {
                                                                        _$20: {
                                                                            property.pop();
                                                                            property.push(func);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (!skip) {
                                                        options.push(property);
                                                    }
                                                }
                                            } else {
                                                _$21: {
                                                    arg.error('Invalid property');
                                                    ok = false;
                                                }
                                            }
                                        }
                                        index = index + 1;
                                        continue;
                                    }
                                }
                                break _$9;
                            }
                        if (ok) {
                            _$22 = [
                                name,
                                arity,
                                precedence,
                                options
                            ];
                        } else {
                            _$22 = null;
                        }
                        _$4 = _$22;
                        break _$5;
                    }
                    return _$4;
                };
                ast.defineSymbol(ast.createMacro('#exec-meta', 'unary', 'LOW', {
                    'postCombine': function (ast) {
                        var code, innerDo, _$4, _$5;
                        _$5: {
                            code = ast.at(0).copy();
                            innerDo = ast.newDo([
                                code.copy(),
                                ast.newTag('null')
                            ]);
                            _$4 = ast.newMeta(innerDo);
                            break _$5;
                        }
                        return _$4;
                    }
                }));
                ast.defineSymbol(ast.createMacro('#keep-meta', 'unary', 'LOW', {
                    'postCombine': function (ast) {
                        var code, tail, innerDo, _$4, _$5;
                        _$5: {
                            code = ast.at(0).copy();
                            tail = ast.fromJsonString('{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":92,"column":28},"end":{"line":92,"column":51}},"args":[{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":92,"column":44},"end":{"line":92,"column":44}},"args":[{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":92,"column":41},"end":{"line":92,"column":43}},"args":[{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":92,"column":38},"end":{"line":92,"column":38}},"args":[{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":92,"column":35},"end":{"line":92,"column":37}},"args":[{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":92,"column":32},"end":{"line":92,"column":32}},"args":[{"id":"<tag>","kind":"tag","val":"ast","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":92,"column":29},"end":{"line":92,"column":29}},"args":[]},{"id":"<name>","kind":"tag","val":"at","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":92,"column":33},"end":{"line":92,"column":33}},"args":[]}]},{"id":"<value>","kind":"value","val":0,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":92,"column":35},"end":{"line":92,"column":37}},"args":[]}]},{"id":"<name>","kind":"tag","val":"at","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":92,"column":39},"end":{"line":92,"column":39}},"args":[]}]},{"id":"<value>","kind":"value","val":0,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":92,"column":41},"end":{"line":92,"column":43}},"args":[]}]},{"id":"<name>","kind":"tag","val":"copy","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":92,"column":45},"end":{"line":92,"column":45}},"args":[]}]},{"id":"<tuple>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":92,"column":49},"end":{"line":92,"column":50}},"args":[]}]}');
                            innerDo = ast.newDo([
                                code.copy(),
                                tail
                            ]);
                            _$4 = ast.newMeta(innerDo);
                            break _$5;
                        }
                        return _$4;
                    }
                }));
                ast.defineSymbol(ast.createMacro('#macro', 'binaryKeyword', 'LOW', {
                    'expand': function (ast) {
                        var argsTuple, args, result, _$4, _$5, _$6, _$7, _$8;
                        _$5: {
                            if (!ast.count === 2) {
                                _$6: {
                                    ast.error('Expected arguments: name and properties');
                                    return null;
                                }
                            }
                            argsTuple = ast.at(1).asTuple();
                            args = composeMacroArguments(ast.at(0), argsTuple);
                            if (args !== null) {
                                _$8: {
                                    result = ast.fromJsonString('{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":110,"column":32},"end":{"line":110,"column":80}},"args":[{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":110,"column":36},"end":{"line":110,"column":36}},"args":[{"id":"<tag>","kind":"tag","val":"ast","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":110,"column":33},"end":{"line":110,"column":33}},"args":[]},{"id":"<name>","kind":"tag","val":"createMacro","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":110,"column":37},"end":{"line":110,"column":37}},"args":[]}]},{"id":"<tuple>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":110,"column":48},"end":{"line":110,"column":79}},"args":[{"id":"<tag>","kind":"tag","val":"__arg0","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":110,"column":48},"end":{"line":110,"column":55}},"args":[]},{"id":"<tag>","kind":"tag","val":"__arg1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":110,"column":55},"end":{"line":110,"column":63}},"args":[]},{"id":"<tag>","kind":"tag","val":"__arg2","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":110,"column":63},"end":{"line":110,"column":71}},"args":[]},{"id":"<tag>","kind":"tag","val":"__arg3","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":110,"column":71},"end":{"line":110,"column":79}},"args":[]}]}]}');
                                    result.replaceTag('__arg0', args[0]);
                                    result.replaceTag('__arg1', args[1]);
                                    result.replaceTag('__arg2', args[2]);
                                    result.replaceTag('__arg3', args[3]);
                                    _$7 = result;
                                    break _$8;
                                }
                            } else {
                                _$7 = null;
                            }
                            _$4 = _$7;
                            break _$5;
                        }
                        return _$4;
                    }
                }));
                ast.defineSymbol(ast.createMacro('#defmacro', 'binaryKeyword', 'LOW', {
                    'postCombine': function (ast) {
                        var argsTuple, args, definition, _$4, _$5, _$6, _$7, _$8;
                        _$5: {
                            if (!ast.count === 2) {
                                _$6: {
                                    ast.error('Expected arguments: name and properties');
                                    return null;
                                }
                            }
                            argsTuple = ast.at(1).asTuple();
                            args = composeMacroArguments(ast.at(0), argsTuple);
                            if (args !== null) {
                                _$8: {
                                    definition = ast.fromJsonString('{"id":"<tuple>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":132,"column":36},"end":{"line":132,"column":108}},"args":[{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":132,"column":53},"end":{"line":132,"column":101}},"args":[{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":132,"column":40},"end":{"line":132,"column":40}},"args":[{"id":"<tag>","kind":"tag","val":"ast","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":132,"column":37},"end":{"line":132,"column":37}},"args":[]},{"id":"<name>","kind":"tag","val":"defineSymbol","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":132,"column":41},"end":{"line":132,"column":41}},"args":[]}]},{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":132,"column":53},"end":{"line":132,"column":101}},"args":[{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":132,"column":57},"end":{"line":132,"column":57}},"args":[{"id":"<tag>","kind":"tag","val":"ast","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":132,"column":54},"end":{"line":132,"column":54}},"args":[]},{"id":"<name>","kind":"tag","val":"createMacro","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":132,"column":58},"end":{"line":132,"column":58}},"args":[]}]},{"id":"<tuple>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":132,"column":69},"end":{"line":132,"column":100}},"args":[{"id":"<tag>","kind":"tag","val":"__arg0","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":132,"column":69},"end":{"line":132,"column":76}},"args":[]},{"id":"<tag>","kind":"tag","val":"__arg1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":132,"column":76},"end":{"line":132,"column":84}},"args":[]},{"id":"<tag>","kind":"tag","val":"__arg2","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":132,"column":84},"end":{"line":132,"column":92}},"args":[]},{"id":"<tag>","kind":"tag","val":"__arg3","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":132,"column":92},"end":{"line":132,"column":100}},"args":[]}]}]}]},{"id":"<tag>","kind":"tag","val":"null","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":132,"column":102},"end":{"line":132,"column":108}},"args":[]}]}');
                                    definition.replaceTag('__arg0', args[0]);
                                    definition.replaceTag('__arg1', args[1]);
                                    definition.replaceTag('__arg2', args[2]);
                                    definition.replaceTag('__arg3', args[3]);
                                    _$7 = ast.newMeta(ast.newDo(definition));
                                    break _$8;
                                }
                            } else {
                                _$7 = null;
                            }
                            _$4 = _$7;
                            break _$5;
                        }
                        return _$4;
                    }
                }));
                ast.defineSymbol(ast.createMacro('#keepmacro', 'binaryKeyword', 'LOW', {
                    'postCombine': function (ast) {
                        var argsTuple, args, definition, result, _$4, _$5, _$6, _$7, _$8;
                        _$5: {
                            if (!ast.count === 2) {
                                _$6: {
                                    ast.error('Expected arguments: name and properties');
                                    return null;
                                }
                            }
                            argsTuple = ast.at(1).asTuple();
                            args = composeMacroArguments(ast.at(0), argsTuple);
                            if (args !== null) {
                                _$8: {
                                    definition = ast.fromJsonString('{"id":"<tuple>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":154,"column":36},"end":{"line":154,"column":108}},"args":[{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":154,"column":53},"end":{"line":154,"column":101}},"args":[{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":154,"column":40},"end":{"line":154,"column":40}},"args":[{"id":"<tag>","kind":"tag","val":"ast","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":154,"column":37},"end":{"line":154,"column":37}},"args":[]},{"id":"<name>","kind":"tag","val":"defineSymbol","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":154,"column":41},"end":{"line":154,"column":41}},"args":[]}]},{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":154,"column":53},"end":{"line":154,"column":101}},"args":[{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":154,"column":57},"end":{"line":154,"column":57}},"args":[{"id":"<tag>","kind":"tag","val":"ast","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":154,"column":54},"end":{"line":154,"column":54}},"args":[]},{"id":"<name>","kind":"tag","val":"createMacro","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":154,"column":58},"end":{"line":154,"column":58}},"args":[]}]},{"id":"<tuple>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":154,"column":69},"end":{"line":154,"column":100}},"args":[{"id":"<tag>","kind":"tag","val":"__arg0","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":154,"column":69},"end":{"line":154,"column":76}},"args":[]},{"id":"<tag>","kind":"tag","val":"__arg1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":154,"column":76},"end":{"line":154,"column":84}},"args":[]},{"id":"<tag>","kind":"tag","val":"__arg2","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":154,"column":84},"end":{"line":154,"column":92}},"args":[]},{"id":"<tag>","kind":"tag","val":"__arg3","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":154,"column":92},"end":{"line":154,"column":100}},"args":[]}]}]}]},{"id":"<tag>","kind":"tag","val":"null","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":154,"column":102},"end":{"line":154,"column":108}},"args":[]}]}');
                                    definition.replaceTag('__arg0', args[0]);
                                    definition.replaceTag('__arg1', args[1]);
                                    definition.replaceTag('__arg2', args[2]);
                                    definition.replaceTag('__arg3', args[3]);
                                    result = ast.newMeta(ast.newDo(definition));
                                    result.sym = ast.keyScope.get('#keep-meta');
                                    _$7 = result;
                                    break _$8;
                                }
                            } else {
                                _$7 = null;
                            }
                            _$4 = _$7;
                            break _$5;
                        }
                        return _$4;
                    }
                }));
            }
            _$4: {
                ast.defineSymbol(ast.createMacro('~`', 'unary', 'LOW', {
                    'expand': function (ast) {
                        return undefined;
                    }
                }));
            }
            _$5: {
                ast.defineSymbol(ast.createMacro('`', 'unary', 'LOW', {
                    'doNotExpandChildren': true,
                    'expand': function (ast) {
                        var code, result, tagReplacements, unquoteIndex, _$6, _$7;
                        _$7: {
                            code = ast.at(0);
                            result = ast.fromJsonString('{"id":"<do>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":180,"column":24},"end":{"line":184,"column":4}},"args":[{"id":"=","kind":"builtin","val":"=","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":181,"column":19},"end":{"line":181,"column":19}},"args":[{"id":"<vTagDeclaration>","kind":"tag","val":"codeTag","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":181,"column":6},"end":{"line":181,"column":11}},"args":[]},{"id":"#quote","kind":"builtin","val":"#quote","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":181,"column":21},"end":{"line":181,"column":21}},"args":[{"id":"<tag>","kind":"tag","val":"code","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":181,"column":28},"end":{"line":181,"column":28}},"args":[]}]}]},{"id":"<tag>","kind":"tag","val":"tagReplacements","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":182,"column":6},"end":{"line":182,"column":21}},"args":[]},{"id":"<vTag>","kind":"tag","val":"codeTag","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":183,"column":6},"end":{"line":183,"column":7}},"args":[]}]}');
                            tagReplacements = [];
                            unquoteIndex = 1;
                            code.forEachRecursive(function (child) {
                                var replacement, replacementName, replacementNameVal, replacementNameTag, tagReplacement, _$8, _$9, _$10, _$11;
                                _$9: {
                                    if (child.id === '~`') {
                                        _$10: {
                                            _$11: {
                                                replacement = child.at(0);
                                                replacementName = 'unquote' + unquoteIndex;
                                                replacementNameVal = child.newValue(replacementName);
                                                replacementNameTag = child.newTag(replacementName);
                                                tagReplacement = ast.fromJsonString('{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":194,"column":36},"end":{"line":194,"column":86}},"args":[{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":194,"column":47},"end":{"line":194,"column":47}},"args":[{"id":"<vTag>","kind":"tag","val":"codeTag","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":194,"column":37},"end":{"line":194,"column":46}},"args":[]},{"id":"<name>","kind":"tag","val":"replaceTag","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":194,"column":48},"end":{"line":194,"column":48}},"args":[]}]},{"id":"<tuple>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":194,"column":58},"end":{"line":194,"column":85}},"args":[{"id":"<tag>","kind":"tag","val":"quotedTagName","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":194,"column":58},"end":{"line":194,"column":72}},"args":[]},{"id":"<tag>","kind":"tag","val":"replacement","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":194,"column":72},"end":{"line":194,"column":85}},"args":[]}]}]}');
                                            }
                                            child.replaceWith(replacementNameTag);
                                            tagReplacement.replaceTag('quotedTagName', replacementNameVal);
                                            tagReplacement.replaceTag('replacement', replacement);
                                            tagReplacements.push(tagReplacement);
                                            unquoteIndex += 1;
                                        }
                                    }
                                    _$8 = undefined;
                                    break _$9;
                                }
                                return _$8;
                            });
                            result.replaceTag('code', code);
                            result.replaceTag('tagReplacements', tagReplacements);
                            result.resolveVirtual();
                            _$6 = result;
                            break _$7;
                        }
                        return _$6;
                    }
                }));
            }
            _$6: {
                ast.defineSymbol(ast.createMacro('do!', 'unary', 'LOW', {
                    'expand': function (ast) {
                        var body, statements, result, _$7, _$8, _$9, _$10, codeTag0;
                        _$8: {
                            body = ast.at(0);
                            statements = body.copy().asTuple();
                            _$10: {
                                codeTag0 = ast.fromJsonString('{"id":"<do>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":212,"column":6},"end":{"line":215,"column":17}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":213,"column":8},"end":{"line":213,"column":8}},"args":[]},{"id":"<tag>","kind":"tag","val":"undefined","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":214,"column":8},"end":{"line":214,"column":17}},"args":[]}]}');
                                codeTag0.replaceTag('unquote1', statements.map(function (arg) {
                                    return arg;
                                }));
                                _$9 = codeTag0;
                                break _$10;
                            }
                            result = _$9;
                            _$7 = result;
                            break _$8;
                        }
                        return _$7;
                    }
                }));
            }
            _$7: {
                ast.defineSymbol(ast.createMacro('#metamodule', 'unary', 'LOW', {
                    'expand': function (ast) {
                        var body, _$8, _$9, _$10, _$11, codeTag0;
                        _$9: {
                            body = ast.at(0);
                            _$11: {
                                codeTag0 = ast.fromJsonString('{"id":"<tuple>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":222,"column":6},"end":{"line":229,"column":0}},"args":[{"id":"<xTag>","kind":"tag","val":"module","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":222,"column":6},"end":{"line":222,"column":16}},"args":[]},{"id":"=","kind":"builtin","val":"=","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":223,"column":21},"end":{"line":223,"column":21}},"args":[{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":223,"column":12},"end":{"line":223,"column":12}},"args":[{"id":"<tag>","kind":"tag","val":"module","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":223,"column":6},"end":{"line":223,"column":6}},"args":[]},{"id":"<name>","kind":"tag","val":"exports","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":223,"column":13},"end":{"line":223,"column":13}},"args":[]}]},{"id":"->","kind":"builtin","val":"->","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":223,"column":29},"end":{"line":223,"column":29}},"args":[{"id":"<argument>","kind":"tag","val":"ast","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":223,"column":23},"end":{"line":223,"column":27}},"args":[]},{"id":"<do>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":224,"column":8},"end":{"line":229,"column":14}},"args":[{"id":"<do>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":225,"column":10},"end":{"line":227,"column":19}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":226,"column":12},"end":{"line":227,"column":10}},"args":[]}]},{"id":"<tag>","kind":"tag","val":"null","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":227,"column":10},"end":{"line":227,"column":14}},"args":[]}]}]}]}]}');
                                codeTag0.replaceTag('unquote1', body);
                                _$10 = codeTag0;
                                break _$11;
                            }
                            _$8 = _$10;
                            break _$9;
                        }
                        return _$8;
                    }
                }));
            }
            _$8: {
                ast.defineSymbol(ast.createMacro('#metaimport', 'unary', 'LOW', {
                    'postCombine': function (ast) {
                        var moduleNames, moduleStrings, _$9, _$10, _$11, _$12, codeTag0;
                        _$10: {
                            moduleNames = ast.at(0);
                            moduleStrings = moduleNames.asTuple().map(function (moduleName) {
                                var moduleString, _$11, _$12, _$13, _$14;
                                _$12: {
                                    moduleString = moduleName.getSimpleValue();
                                    if (typeof moduleString !== 'string') {
                                        _$14: {
                                            moduleName.error('Invalid module name');
                                            _$13 = moduleName;
                                            break _$14;
                                        }
                                    } else {
                                        _$13 = moduleName.newValue(moduleString);
                                    }
                                    _$11 = _$13;
                                    break _$12;
                                }
                                return _$11;
                            });
                            _$12: {
                                codeTag0 = ast.fromJsonString('{"id":"<tuple>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":243,"column":8},"end":{"line":251,"column":0}},"args":[{"id":"try","kind":"builtin","val":"try","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":243,"column":8},"end":{"line":243,"column":8}},"args":[{"id":"<tuple>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":244,"column":10},"end":{"line":247,"column":8}},"args":[{"id":"=","kind":"builtin","val":"=","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":244,"column":26},"end":{"line":244,"column":26}},"args":[{"id":"<tagDeclaration>","kind":"tag","val":"metaRequire","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":244,"column":10},"end":{"line":244,"column":14}},"args":[]},{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":244,"column":52},"end":{"line":244,"column":79}},"args":[{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":244,"column":28},"end":{"line":244,"column":51}},"args":[{"id":"<tag>","kind":"tag","val":"require","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":244,"column":29},"end":{"line":244,"column":29}},"args":[]},{"id":"<value>","kind":"value","val":"require-like","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":244,"column":37},"end":{"line":244,"column":50}},"args":[]}]},{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":244,"column":52},"end":{"line":244,"column":79}},"args":[{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":244,"column":65},"end":{"line":244,"column":65}},"args":[{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":244,"column":56},"end":{"line":244,"column":56}},"args":[{"id":"<tag>","kind":"tag","val":"ast","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":244,"column":53},"end":{"line":244,"column":53}},"args":[]},{"id":"<name>","kind":"tag","val":"compiler","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":244,"column":57},"end":{"line":244,"column":57}},"args":[]}]},{"id":"<name>","kind":"tag","val":"parser","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":244,"column":66},"end":{"line":244,"column":66}},"args":[]}]},{"id":"<name>","kind":"tag","val":"source","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":244,"column":73},"end":{"line":244,"column":73}},"args":[]}]}]}]},{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":246,"column":12},"end":{"line":247,"column":8}},"args":[{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":245,"column":27},"end":{"line":245,"column":27}},"args":[{"id":"<array>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":245,"column":10},"end":{"line":245,"column":26}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":245,"column":11},"end":{"line":245,"column":11}},"args":[]}]},{"id":"<name>","kind":"tag","val":"forEach","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":245,"column":28},"end":{"line":245,"column":28}},"args":[]}]},{"id":"->","kind":"builtin","val":"->","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":246,"column":12},"end":{"line":247,"column":8}},"args":[{"id":"<argument>","kind":"tag","val":"m","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":246,"column":12},"end":{"line":246,"column":12}},"args":[]},{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":246,"column":33},"end":{"line":246,"column":37}},"args":[{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":246,"column":17},"end":{"line":246,"column":31}},"args":[{"id":"<tag>","kind":"tag","val":"metaRequire","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":246,"column":18},"end":{"line":246,"column":18}},"args":[]},{"id":"<tag>","kind":"tag","val":"m","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":246,"column":30},"end":{"line":246,"column":30}},"args":[]}]},{"id":"<tag>","kind":"tag","val":"ast","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":246,"column":33},"end":{"line":246,"column":37}},"args":[]}]}]}]}]},{"id":"catch","kind":"builtin","val":"catch","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":247,"column":8},"end":{"line":247,"column":8}},"args":[{"id":"<tagDeclaration>","kind":"tag","val":"e","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":247,"column":14},"end":{"line":247,"column":20}},"args":[]},{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":248,"column":10},"end":{"line":249,"column":8}},"args":[{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":248,"column":13},"end":{"line":248,"column":13}},"args":[{"id":"<tag>","kind":"tag","val":"ast","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":248,"column":10},"end":{"line":248,"column":10}},"args":[]},{"id":"<name>","kind":"tag","val":"error","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":248,"column":14},"end":{"line":248,"column":14}},"args":[]}]},{"id":"+","kind":"builtin","val":"+","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":248,"column":19},"end":{"line":248,"column":61}},"args":[{"id":"<value>","kind":"value","val":"Error importing module: ","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":248,"column":20},"end":{"line":248,"column":45}},"args":[]},{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":248,"column":59},"end":{"line":248,"column":60}},"args":[{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":248,"column":50},"end":{"line":248,"column":50}},"args":[{"id":"<tag>","kind":"tag","val":"e","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":248,"column":49},"end":{"line":248,"column":49}},"args":[]},{"id":"<name>","kind":"tag","val":"toString","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":248,"column":51},"end":{"line":248,"column":51}},"args":[]}]},{"id":"<tuple>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":248,"column":59},"end":{"line":248,"column":60}},"args":[]}]}]}]}]}]},{"id":"<tag>","kind":"tag","val":"null","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":249,"column":8},"end":{"line":249,"column":12}},"args":[]}]}');
                                codeTag0.replaceTag('unquote1', moduleStrings);
                                _$11 = codeTag0;
                                break _$12;
                            }
                            _$9 = moduleNames.newMeta(_$11);
                            break _$10;
                        }
                        return _$9;
                    }
                }));
            }
            _$9: {
                ast.defineSymbol(ast.createMacro('while', 'binaryKeyword', 'LOW', {
                    'expand': function (ast) {
                        var body, condition, _$10, _$11, _$12, _$13, codeTag0;
                        _$11: {
                            body = ast.at(1);
                            condition = ast.at(0);
                            _$13: {
                                codeTag0 = ast.fromJsonString('{"id":"loop","kind":"builtin","val":"loop","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":255,"column":6},"end":{"line":255,"column":6}},"args":[{"id":"<tuple>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":255,"column":11},"end":{"line":255,"column":12}},"args":[]},{"id":"if","kind":"builtin","val":"if","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":256,"column":6},"end":{"line":261,"column":0}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":256,"column":9},"end":{"line":256,"column":22}},"args":[]},{"id":"<do>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":256,"column":24},"end":{"line":261,"column":0}},"args":[{"id":"<do>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":257,"column":8},"end":{"line":259,"column":17}},"args":[{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":258,"column":10},"end":{"line":259,"column":8}},"args":[]}]},{"id":"next!","kind":"builtin","val":"next!","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":259,"column":8},"end":{"line":259,"column":8}},"args":[{"id":"<tuple>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":259,"column":14},"end":{"line":259,"column":15}},"args":[]}]}]}]}]}');
                                codeTag0.replaceTag('unquote1', condition);
                                codeTag0.replaceTag('unquote2', body);
                                _$12 = codeTag0;
                                break _$13;
                            }
                            _$10 = _$12;
                            break _$11;
                        }
                        return _$10;
                    }
                }));
            }
            _$10: {
                ast.defineSymbol(ast.createMacro('.->', 'binary', 'MEMBER', {
                    'expand': function (ast) {
                        var following, start, current, others, getLeftmost, other, otherLeftmost, otherParent, _$11, _$12, _$13, _$14, _$15, _$16, _$17, _$18, _$19, codeTag0, _$20, _$21, _$22, codeTag1;
                        _$12: {
                            following = ast.at(1);
                            start = ast.at(0);
                            _$13: {
                                current = start;
                                others = following.asTuple();
                                getLeftmost = function (root) {
                                    var _$14, _$15, _$16, _$17, _$18;
                                    _$15: {
                                        _$16:
                                            while (true) {
                                                if (root.isCall() || root.isMember()) {
                                                    _$17: {
                                                        _$18: {
                                                            root = root.at(0);
                                                        }
                                                        continue;
                                                    }
                                                }
                                                break _$16;
                                            }
                                        _$14 = root;
                                        break _$15;
                                    }
                                    return _$14;
                                };
                            }
                            _$14:
                                while (true) {
                                    if (others.count > 0) {
                                        _$15: {
                                            _$16: {
                                                _$17: {
                                                    other = others.shift();
                                                    otherLeftmost = getLeftmost(other);
                                                }
                                                if (otherLeftmost.parent === null) {
                                                    _$19: {
                                                        codeTag0 = ast.fromJsonString('{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":278,"column":23},"end":{"line":278,"column":23}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":278,"column":12},"end":{"line":278,"column":22}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":278,"column":24},"end":{"line":278,"column":41}},"args":[]}]}');
                                                        codeTag0.replaceTag('unquote1', current);
                                                        codeTag0.replaceTag('unquote2', otherLeftmost);
                                                        _$18 = codeTag0;
                                                        break _$19;
                                                    }
                                                } else {
                                                    _$20: {
                                                        otherParent = otherLeftmost.parent;
                                                        otherParent.shift();
                                                        _$22: {
                                                            codeTag1 = ast.fromJsonString('{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":282,"column":44},"end":{"line":282,"column":44}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":282,"column":33},"end":{"line":282,"column":43}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":282,"column":45},"end":{"line":282,"column":62}},"args":[]}]}');
                                                            codeTag1.replaceTag('unquote1', current);
                                                            codeTag1.replaceTag('unquote2', otherLeftmost);
                                                            _$21 = codeTag1;
                                                            break _$22;
                                                        }
                                                        otherParent.unshift(_$21);
                                                        _$18 = other;
                                                        break _$20;
                                                    }
                                                }
                                                current = _$18;
                                            }
                                            continue;
                                        }
                                    }
                                    break _$14;
                                }
                            _$11 = current;
                            break _$12;
                        }
                        return _$11;
                    }
                }));
            }
            _$11: {
                ast.defineSymbol(ast.createMacro('<-', 'binary', 'MEDIUM', {
                    'expand': function (ast) {
                        var args, callee, _$12, _$13, _$14, _$15, codeTag0;
                        _$13: {
                            args = ast.at(1);
                            callee = ast.at(0);
                            _$15: {
                                codeTag0 = ast.fromJsonString('{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":290,"column":16},"end":{"line":290,"column":23}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":290,"column":6},"end":{"line":290,"column":15}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":290,"column":16},"end":{"line":290,"column":23}},"args":[]}]}');
                                codeTag0.replaceTag('unquote1', callee);
                                codeTag0.replaceTag('unquote2', args);
                                _$14 = codeTag0;
                                break _$15;
                            }
                            _$12 = _$14;
                            break _$13;
                        }
                        return _$12;
                    }
                }));
            }
            _$12: {
                ast.defineSymbol(ast.createMacro('@', 'unary', 'HIGH', {
                    'expand': function (ast) {
                        var member, _$13, _$14, _$15, _$16, codeTag0, _$17, codeTag1, _$18, codeTag2, _$19, _$20, _$21, codeTag3, _$22, codeTag4, _$23, codeTag5;
                        _$14: {
                            member = ast.at(0);
                            if (member.isTag()) {
                                _$16: {
                                    codeTag0 = ast.fromJsonString('{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":297,"column":11},"end":{"line":297,"column":11}},"args":[{"id":"<tag>","kind":"tag","val":"this","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":297,"column":7},"end":{"line":297,"column":7}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":297,"column":13},"end":{"line":297,"column":13}},"args":[]}]}');
                                    codeTag0.replaceTag('unquote1', member);
                                    _$15 = codeTag0;
                                    break _$16;
                                }
                            } else {
                                if (member.isArray()) {
                                    if (member.count === 0) {
                                        _$17: {
                                            codeTag1 = ast.fromJsonString('{"id":"<tag>","kind":"tag","val":"this","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":300,"column":9},"end":{"line":300,"column":9}},"args":[]}');
                                            _$15 = codeTag1;
                                            break _$17;
                                        }
                                    } else {
                                        if (member.count === 1) {
                                            _$18: {
                                                codeTag2 = ast.fromJsonString('{"id":"<element>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":302,"column":14},"end":{"line":302,"column":14}},"args":[{"id":"<tag>","kind":"tag","val":"this","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":302,"column":9},"end":{"line":302,"column":9}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":302,"column":14},"end":{"line":302,"column":14}},"args":[]}]}');
                                                codeTag2.replaceTag('unquote1', member);
                                                _$15 = codeTag2;
                                                break _$18;
                                            }
                                        } else {
                                            _$19: {
                                                member.error('Member operator accepts only one operand');
                                                _$21: {
                                                    codeTag3 = ast.fromJsonString('{"id":"<tag>","kind":"tag","val":"undefined","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":305,"column":9},"end":{"line":305,"column":9}},"args":[]}');
                                                    _$20 = codeTag3;
                                                    break _$21;
                                                }
                                                _$15 = _$20;
                                                break _$19;
                                            }
                                        }
                                    }
                                } else {
                                    if (member.isPlaceholder() && member.getSimpleValue() === null) {
                                        _$22: {
                                            codeTag4 = ast.fromJsonString('{"id":"<tag>","kind":"tag","val":"this","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":307,"column":7},"end":{"line":307,"column":7}},"args":[]}');
                                            _$15 = codeTag4;
                                            break _$22;
                                        }
                                    } else {
                                        _$23: {
                                            codeTag5 = ast.fromJsonString('{"id":"<element>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":309,"column":12},"end":{"line":309,"column":12}},"args":[{"id":"<tag>","kind":"tag","val":"this","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":309,"column":7},"end":{"line":309,"column":7}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":309,"column":12},"end":{"line":309,"column":12}},"args":[]}]}');
                                            codeTag5.replaceTag('unquote1', member);
                                            _$15 = codeTag5;
                                            break _$23;
                                        }
                                    }
                                }
                            }
                            _$13 = _$15;
                            break _$14;
                        }
                        return _$13;
                    }
                }));
            }
            _$13: {
                ast.defineSymbol(ast.createMacro('#->', 'unary', 'LOW', {
                    'expand': function (ast) {
                        var body, args, processNext, n, currentId, currentArgName, _$14, _$15, _$16, _$17, _$18, _$19, _$20, codeTag0;
                        _$15: {
                            body = ast.at(0);
                            if (typeof body === 'undefined' || body.isPlaceholder() && body.getSimpleValue() === null) {
                                body = ast.newTag('undefined');
                            }
                            args = ast.newTuple();
                            processNext = true;
                            n = 1;
                            _$16:
                                while (true) {
                                    if (processNext) {
                                        _$17: {
                                            processNext = false;
                                            _$18: {
                                                currentId = '#' + n;
                                                currentArgName = '__$arg$' + n;
                                            }
                                            body.forEachRecursive(function (node) {
                                                var _$19, _$20, _$21, _$22;
                                                _$20: {
                                                    if (node.isPlaceholder() && (node.getSimpleValue() === currentId || n === 1 && node.getSimpleValue() === '#it')) {
                                                        _$21: {
                                                            if (!processNext) {
                                                                _$22: {
                                                                    processNext = true;
                                                                    args.push(ast.newTag(currentArgName).handleAsFunctionArgument());
                                                                }
                                                            }
                                                            node.replaceWith(node.newTag(currentArgName));
                                                        }
                                                    }
                                                    _$19 = undefined;
                                                    break _$20;
                                                }
                                                return _$19;
                                            });
                                            n = n + 1;
                                            continue;
                                        }
                                    }
                                    break _$16;
                                }
                            _$20: {
                                codeTag0 = ast.fromJsonString('{"id":"->","kind":"builtin","val":"->","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":333,"column":15},"end":{"line":333,"column":15}},"args":[{"id":"<argument>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":333,"column":5},"end":{"line":333,"column":13}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":333,"column":18},"end":{"line":333,"column":26}},"args":[]}]}');
                                codeTag0.replaceTag('unquote1', args);
                                codeTag0.replaceTag('unquote2', body);
                                _$19 = codeTag0;
                                break _$20;
                            }
                            _$14 = _$19;
                            break _$15;
                        }
                        return _$14;
                    }
                }));
            }
            _$14: {
                ast.defineSymbol(ast.createMacro('=>', 'binary', 'FUNCTION', {
                    'leftPrecedence': 'FUNCTION-LEFT',
                    'expand': function (ast) {
                        var rhs, lhs, traverser, result, _$15, _$16, _$17, _$18, codeTag0;
                        _$16: {
                            rhs = ast.at(1);
                            lhs = ast.at(0);
                            traverser = function (__$arg$1) {
                                var _$17, _$18, _$19, _$20, codeTag0;
                                _$18: {
                                    if (__$arg$1.isTag() && __$arg$1.getTag() === 'this') {
                                        _$20: {
                                            codeTag0 = ast.fromJsonString('{"id":"<vTag>","kind":"tag","val":"captured-this","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":344,"column":26},"end":{"line":344,"column":27}},"args":[]}');
                                            _$19 = codeTag0;
                                            break _$20;
                                        }
                                        __$arg$1.replaceWith(_$19);
                                    }
                                    if (!__$arg$1.isFunctionDefinition()) {
                                        __$arg$1.forEach(function (__$arg$1) {
                                            return traverser(__$arg$1);
                                        });
                                    }
                                    _$17 = undefined;
                                    break _$18;
                                }
                                return _$17;
                            };
                            traverser(rhs);
                            _$18: {
                                codeTag0 = ast.fromJsonString('{"id":"<do>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":348,"column":19},"end":{"line":351,"column":4}},"args":[{"id":"=","kind":"builtin","val":"=","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":349,"column":25},"end":{"line":349,"column":25}},"args":[{"id":"<vTagDeclaration>","kind":"tag","val":"captured-this","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":349,"column":6},"end":{"line":349,"column":11}},"args":[]},{"id":"<tag>","kind":"tag","val":"this","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":349,"column":27},"end":{"line":349,"column":27}},"args":[]}]},{"id":"->","kind":"builtin","val":"->","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":350,"column":15},"end":{"line":350,"column":15}},"args":[{"id":"<argument>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":350,"column":6},"end":{"line":350,"column":13}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":350,"column":18},"end":{"line":350,"column":25}},"args":[]}]}]}');
                                codeTag0.replaceTag('unquote1', lhs);
                                codeTag0.replaceTag('unquote2', rhs);
                                _$17 = codeTag0;
                                break _$18;
                            }
                            result = _$17;
                            result.resolveVirtual();
                            _$15 = result;
                            break _$16;
                        }
                        return _$15;
                    }
                }));
            }
            _$15: {
                ast.defineSymbol(ast.createMacro('#js', 'unary', 'HIGH', {
                    'expand': function (ast) {
                        var expr, code, _$16, _$17, _$18, _$19, codeTag0;
                        _$17: {
                            expr = ast.at(0);
                            _$19: {
                                codeTag0 = ast.fromJsonString('{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":364,"column":33},"end":{"line":364,"column":44}},"args":[{"id":"<xTag>","kind":"tag","val":"eval","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":364,"column":17},"end":{"line":364,"column":32}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":364,"column":33},"end":{"line":364,"column":44}},"args":[]}]}');
                                codeTag0.replaceTag('unquote1', expr);
                                _$18 = codeTag0;
                                break _$19;
                            }
                            code = _$18;
                            if (expr.isValue()) {
                                code.set('js', expr.getValue());
                            }
                            _$16 = code;
                            break _$17;
                        }
                        return _$16;
                    }
                }));
            }
            _$16: {
                ast.defineSymbol(ast.createMacro('#no-new-scope', 'unary', 'LOW', {
                    'expand': function (ast) {
                        var expr, _$17, _$18;
                        _$18: {
                            expr = ast.at(0);
                            expr.set('no-new-scope', true);
                            _$17 = expr;
                            break _$18;
                        }
                        return _$17;
                    }
                }));
            }
            _$17: {
                ast.defineSymbol(ast.createMacro('?', 'post', 'MEMBER', {
                    'expand': function (ast) {
                        var val, result, _$18, _$19, _$20, _$21, codeTag0;
                        _$19: {
                            val = ast.at(0);
                            _$21: {
                                codeTag0 = ast.fromJsonString('{"id":"<do>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":380,"column":18},"end":{"line":386,"column":4}},"args":[{"id":"=","kind":"builtin","val":"=","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":381,"column":15},"end":{"line":381,"column":15}},"args":[{"id":"<vTagDeclaration>","kind":"tag","val":"val","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":381,"column":6},"end":{"line":381,"column":11}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":381,"column":17},"end":{"line":381,"column":17}},"args":[]}]},{"id":"if","kind":"builtin","val":"if","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":382,"column":6},"end":{"line":382,"column":6}},"args":[{"id":"!=","kind":"builtin","val":"!=","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":382,"column":9},"end":{"line":382,"column":36}},"args":[{"id":"typeof","kind":"builtin","val":"typeof","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":382,"column":10},"end":{"line":382,"column":10}},"args":[{"id":"<vTag>","kind":"tag","val":"val","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":382,"column":17},"end":{"line":382,"column":18}},"args":[]}]},{"id":"<value>","kind":"value","val":"undefined","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":382,"column":25},"end":{"line":382,"column":35}},"args":[]}]},{"id":"<tag>","kind":"tag","val":"true","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":383,"column":8},"end":{"line":384,"column":6}},"args":[]},{"id":"<tag>","kind":"tag","val":"false","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":385,"column":8},"end":{"line":386,"column":4}},"args":[]}]}]}');
                                codeTag0.replaceTag('unquote1', val);
                                _$20 = codeTag0;
                                break _$21;
                            }
                            result = _$20;
                            result.resolveVirtual();
                            _$18 = result;
                            break _$19;
                        }
                        return _$18;
                    }
                }));
            }
            _$18: {
                ast.defineSymbol(ast.createMacro('??', 'binary', 'LOGICAL-OR', {
                    'expand': function (ast) {
                        var other, val, result, _$19, _$20, _$21, _$22, codeTag0;
                        _$20: {
                            other = ast.at(1);
                            val = ast.at(0);
                            _$22: {
                                codeTag0 = ast.fromJsonString('{"id":"<do>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":393,"column":18},"end":{"line":399,"column":4}},"args":[{"id":"=","kind":"builtin","val":"=","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":394,"column":15},"end":{"line":394,"column":15}},"args":[{"id":"<vTagDeclaration>","kind":"tag","val":"val","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":394,"column":6},"end":{"line":394,"column":11}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":394,"column":17},"end":{"line":394,"column":17}},"args":[]}]},{"id":"if","kind":"builtin","val":"if","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":395,"column":6},"end":{"line":395,"column":6}},"args":[{"id":"!=","kind":"builtin","val":"!=","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":395,"column":9},"end":{"line":395,"column":36}},"args":[{"id":"typeof","kind":"builtin","val":"typeof","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":395,"column":10},"end":{"line":395,"column":10}},"args":[{"id":"<vTag>","kind":"tag","val":"val","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":395,"column":17},"end":{"line":395,"column":18}},"args":[]}]},{"id":"<value>","kind":"value","val":"undefined","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":395,"column":25},"end":{"line":395,"column":35}},"args":[]}]},{"id":"<vTag>","kind":"tag","val":"val","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":396,"column":8},"end":{"line":397,"column":6}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":398,"column":8},"end":{"line":399,"column":4}},"args":[]}]}]}');
                                codeTag0.replaceTag('unquote1', val);
                                codeTag0.replaceTag('unquote2', other);
                                _$21 = codeTag0;
                                break _$22;
                            }
                            result = _$21;
                            result.resolveVirtual();
                            _$19 = result;
                            break _$20;
                        }
                        return _$19;
                    }
                }));
            }
            _$19: {
                ast.defineSymbol(ast.createMacro('.?', 'binary', 'MEMBER', {
                    'expand': function (ast) {
                        var tag, val, result, _$20, _$21, _$22, _$23, _$24, codeTag0;
                        _$21: {
                            tag = ast.at(1);
                            val = ast.at(0);
                            if (!tag.isTag()) {
                                _$22: {
                                    tag.error('Member name expected');
                                    return undefined;
                                }
                            }
                            _$24: {
                                codeTag0 = ast.fromJsonString('{"id":"<do>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":409,"column":18},"end":{"line":415,"column":4}},"args":[{"id":"=","kind":"builtin","val":"=","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":410,"column":15},"end":{"line":410,"column":15}},"args":[{"id":"<vTagDeclaration>","kind":"tag","val":"val","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":410,"column":6},"end":{"line":410,"column":11}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":410,"column":17},"end":{"line":410,"column":17}},"args":[]}]},{"id":"if","kind":"builtin","val":"if","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":411,"column":6},"end":{"line":411,"column":6}},"args":[{"id":"&&","kind":"builtin","val":"&&","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":411,"column":9},"end":{"line":411,"column":52}},"args":[{"id":"!=","kind":"builtin","val":"!=","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":411,"column":22},"end":{"line":411,"column":22}},"args":[{"id":"typeof","kind":"builtin","val":"typeof","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":411,"column":10},"end":{"line":411,"column":10}},"args":[{"id":"<vTag>","kind":"tag","val":"val","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":411,"column":17},"end":{"line":411,"column":18}},"args":[]}]},{"id":"<value>","kind":"value","val":"undefined","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":411,"column":25},"end":{"line":411,"column":35}},"args":[]}]},{"id":"!=","kind":"builtin","val":"!=","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":411,"column":45},"end":{"line":411,"column":45}},"args":[{"id":"<vTag>","kind":"tag","val":"val","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":411,"column":40},"end":{"line":411,"column":41}},"args":[]},{"id":"<tag>","kind":"tag","val":"null","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":411,"column":48},"end":{"line":411,"column":48}},"args":[]}]}]},{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":412,"column":8},"end":{"line":413,"column":6}},"args":[{"id":"<vTag>","kind":"tag","val":"val","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":412,"column":8},"end":{"line":412,"column":9}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":412,"column":15},"end":{"line":412,"column":15}},"args":[]}]},{"id":"<vTag>","kind":"tag","val":"val","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":414,"column":8},"end":{"line":415,"column":4}},"args":[]}]}]}');
                                codeTag0.replaceTag('unquote1', val);
                                codeTag0.replaceTag('unquote2', tag);
                                _$23 = codeTag0;
                                break _$24;
                            }
                            result = _$23;
                            result.resolveVirtual();
                            _$20 = result;
                            break _$21;
                        }
                        return _$20;
                    }
                }));
            }
            _$21: {
                ast.defineSymbol(ast.createMacro('|:', 'binary', 'LOW', {
                    'leftPrecedence': 'CALL',
                    'expand': function (ast) {
                        var exprs, start, previousShortcut, previousSymbol, nextSymbol, specialSymbols, whereDefinitions, exprsData, newData, getLeftmost, replacePlaceholder, hasWhereDefinitions, handleWhereDefinition, handleWhereClause, whereClauseDeclaration, whereClauseVariable, analyzeExpr, previous, nextReference, last, current, leftmost, leftmostParent, _$22, _$23, _$24, _$25, _$26, _$27, _$28, _$29, _$30, _$31, _$32, codeTag0, _$33, _$34, codeTag1, _$35, _$36, codeTag2;
                        _$23: {
                            exprs = ast.at(1);
                            start = ast.at(0);
                            _$24: {
                                previousShortcut = '#';
                                previousSymbol = '#previous';
                                nextSymbol = '#next';
                                specialSymbols = [
                                    previousShortcut,
                                    previousSymbol,
                                    nextSymbol
                                ];
                            }
                            whereDefinitions = Object.create(null);
                            exprsData = [];
                            newData = function (expr) {
                                return {
                                    'expr': expr,
                                    'firstOccurrences': [],
                                    'previous': null,
                                    'next': null
                                };
                            };
                            getLeftmost = function (root) {
                                var _$25, _$26, _$27, _$28, _$29;
                                _$26: {
                                    _$27:
                                        while (true) {
                                            if (root.isCall() || root.isMember()) {
                                                _$28: {
                                                    _$29: {
                                                        root = root.at(0);
                                                    }
                                                    continue;
                                                }
                                            }
                                            break _$27;
                                        }
                                    _$25 = root;
                                    break _$26;
                                }
                                return _$25;
                            };
                            replacePlaceholder = function (expr, phName, replacement) {
                                var _$25, _$26;
                                _$26: {
                                    expr.forEachRecursive(function (ph) {
                                        var _$27, _$28;
                                        _$28: {
                                            if (ph.isPlaceholder() && ph.getSimpleValue() === phName) {
                                                ph.replaceWith(replacement);
                                            }
                                            _$27 = undefined;
                                            break _$28;
                                        }
                                        return _$27;
                                    });
                                    _$25 = undefined;
                                    break _$26;
                                }
                                return _$25;
                            };
                            hasWhereDefinitions = false;
                            handleWhereDefinition = function (definition) {
                                var phName, _$25, _$26, _$27, _$28, _$29, _$30;
                                _$26: {
                                    if (!definition.id === '=') {
                                        _$27: {
                                            definition.error('Assignment expected');
                                            return;
                                        }
                                    }
                                    if (!definition.at(0).isPlaceholder()) {
                                        _$28: {
                                            definition.at(0).error('Placeholder expected');
                                            return;
                                        }
                                    }
                                    phName = definition.at(0).getSimpleValue();
                                    if (phName === null || phName.indexOf('#') !== 0 || phName.indexOf('#', 1) > 1) {
                                        _$29: {
                                            definition.at(0).error('Hash identifier expected');
                                            return;
                                        }
                                    }
                                    if (specialSymbols.indexOf(phName) >= 0) {
                                        _$30: {
                                            definition.at(0).error('Hash identifier ' + phName + ' not allowed in where clause');
                                            return;
                                        }
                                    }
                                    hasWhereDefinitions = true;
                                    whereDefinitions[phName] = definition.at(1);
                                    _$25 = undefined;
                                    break _$26;
                                }
                                return _$25;
                            };
                            handleWhereClause = function (expr) {
                                var clauses, _$25, _$26, _$27;
                                if (expr.isTuple() && expr.count > 0) {
                                    _$26: {
                                        if (handleWhereClause(expr.at(-1))) {
                                            expr.pop();
                                        }
                                        _$25 = false;
                                        break _$26;
                                    }
                                } else {
                                    if (expr.isCall() && expr.at(0).isPlaceholder() && expr.at(0).getSimpleValue() === '#where') {
                                        _$27: {
                                            clauses = expr.at(1);
                                            if (clauses.isTuple()) {
                                                clauses.forEach(handleWhereDefinition);
                                            } else {
                                                handleWhereDefinition(clauses);
                                            }
                                            _$25 = true;
                                            break _$27;
                                        }
                                    } else {
                                        _$25 = false;
                                    }
                                }
                                return _$25;
                            };
                            whereClauseDeclaration = function (phName, expr) {
                                var name, tag, _$25, _$26, _$27, _$28, codeTag0;
                                _$26: {
                                    name = phName.substring(1);
                                    tag = expr.newTag(name).handleAsTagDeclaration().handleAsVirtualTag();
                                    _$28: {
                                        codeTag0 = ast.fromJsonString('{"id":"=","kind":"builtin","val":"=","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":487,"column":8},"end":{"line":487,"column":27}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":487,"column":9},"end":{"line":487,"column":16}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":487,"column":20},"end":{"line":487,"column":20}},"args":[]}]}');
                                        codeTag0.replaceTag('unquote1', tag);
                                        codeTag0.replaceTag('unquote2', expr);
                                        _$27 = codeTag0;
                                        break _$28;
                                    }
                                    _$25 = _$27;
                                    break _$26;
                                }
                                return _$25;
                            };
                            whereClauseVariable = function (phName, ph) {
                                var name, _$25, _$26;
                                _$26: {
                                    name = phName.substring(1);
                                    _$25 = ph.newTag(name).handleAsVirtualTag();
                                    break _$26;
                                }
                                return _$25;
                            };
                            if (handleWhereClause(exprs)) {
                                exprs = exprs.newTuple();
                            }
                            analyzeExpr = function (expr) {
                                var data, _$25, _$26;
                                _$26: {
                                    data = newData(expr);
                                    data.expr.forEachRecursive(function (ph) {
                                        var phValue, whereDefinition, _$27, _$28, _$29, _$30, _$31, val0, _$32, _$33, _$34;
                                        _$28: {
                                            if (ph.isPlaceholder()) {
                                                _$29: {
                                                    phValue = ph.getSimpleValue();
                                                    if (phValue === null || phValue === previousShortcut || phValue === previousSymbol) {
                                                        if (data.previous === null) {
                                                            data.previous = ph;
                                                        } else {
                                                            ph.error('More than one previous reference specified');
                                                        }
                                                    } else {
                                                        if (phValue === nextSymbol) {
                                                            if (data.next === null) {
                                                                data.next = ph;
                                                            } else {
                                                                ph.error('More than one next reference specified');
                                                            }
                                                        } else {
                                                            _$31: {
                                                                val0 = whereDefinitions[phValue];
                                                                if (typeof val0 !== 'undefined') {
                                                                    _$32 = true;
                                                                } else {
                                                                    _$32 = false;
                                                                }
                                                                _$30 = _$32;
                                                                break _$31;
                                                            }
                                                            if (_$30) {
                                                                _$33: {
                                                                    whereDefinition = whereDefinitions[phValue];
                                                                    if (whereDefinition !== null) {
                                                                        _$34: {
                                                                            data.firstOccurrences.push(whereClauseDeclaration(phValue, whereDefinition));
                                                                            whereDefinitions[phValue] = null;
                                                                        }
                                                                    }
                                                                    ph.replaceWith(whereClauseVariable(phValue, ph));
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _$27 = undefined;
                                            break _$28;
                                        }
                                        return _$27;
                                    });
                                    exprsData.push(data);
                                    _$25 = undefined;
                                    break _$26;
                                }
                                return _$25;
                            };
                            if (!start.isPlaceholder()) {
                                analyzeExpr(start);
                            }
                            if (exprs.isTuple()) {
                                exprs.forEach(analyzeExpr);
                            } else {
                                analyzeExpr(exprs);
                            }
                            exprsData.forEach(function (data) {
                                var expr, _$25, _$26, _$27, _$28, _$29, codeTag0;
                                _$26: {
                                    if (data.firstOccurrences.length > 0) {
                                        _$27: {
                                            expr = data.expr;
                                            _$29: {
                                                codeTag0 = ast.fromJsonString('{"id":"#no-new-scope","kind":"macro","val":"#no-new-scope","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":533,"column":24},"end":{"line":533,"column":24}},"args":[{"id":"<do>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":533,"column":38},"end":{"line":536,"column":10}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":534,"column":12},"end":{"line":534,"column":12}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":535,"column":12},"end":{"line":535,"column":12}},"args":[]}]}]}');
                                                codeTag0.replaceTag('unquote1', data.firstOccurrences);
                                                codeTag0.replaceTag('unquote2', expr.newTag('$$dataExpr$$'));
                                                _$28 = codeTag0;
                                                break _$29;
                                            }
                                            data.expr = _$28;
                                            data.expr.replaceTag('$$dataExpr$$', expr);
                                        }
                                    }
                                    _$25 = undefined;
                                    break _$26;
                                }
                                return _$25;
                            });
                            previous = null;
                            nextReference = null;
                            last = null;
                            _$25:
                                while (true) {
                                    if (exprsData.length > 0) {
                                        _$26: {
                                            _$27: {
                                                current = exprsData.shift();
                                                if (previous !== null && previous.next !== null) {
                                                    _$28: {
                                                        if (current.previous !== null) {
                                                            current.previous.error('Cannot have a previous reference if the previous expression has a next reference');
                                                        }
                                                        replacePlaceholder(previous.expr, previous.next.getSimpleValue(), current.expr);
                                                        last = previous;
                                                    }
                                                } else {
                                                    _$29: {
                                                        if (current.previous !== null) {
                                                            if (last !== null) {
                                                                replacePlaceholder(current.expr, current.previous.getSimpleValue(), last.expr);
                                                            } else {
                                                                current.previous.error('Cannot have a previous reference with no previous expression');
                                                            }
                                                        } else {
                                                            if (previous !== null) {
                                                                _$30: {
                                                                    if (!current.expr.isCall()) {
                                                                        _$32: {
                                                                            codeTag0 = ast.fromJsonString('{"id":"<call>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":557,"column":30},"end":{"line":557,"column":50}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":557,"column":31},"end":{"line":557,"column":46}},"args":[]},{"id":"<tuple>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":557,"column":48},"end":{"line":557,"column":49}},"args":[]}]}');
                                                                            codeTag0.replaceTag('unquote1', current.expr);
                                                                            _$31 = codeTag0;
                                                                            break _$32;
                                                                        }
                                                                        current.expr = _$31;
                                                                    }
                                                                    leftmost = getLeftmost(current.expr);
                                                                    leftmostParent = leftmost.parent;
                                                                    leftmostParent.shift();
                                                                    _$34: {
                                                                        codeTag1 = ast.fromJsonString('{"id":".","kind":"builtin","val":".","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":561,"column":51},"end":{"line":561,"column":51}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":561,"column":38},"end":{"line":561,"column":50}},"args":[]},{"id":"<tag>","kind":"tag","val":"unquote2","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":561,"column":52},"end":{"line":561,"column":63}},"args":[]}]}');
                                                                        codeTag1.replaceTag('unquote1', last.expr);
                                                                        codeTag1.replaceTag('unquote2', leftmost);
                                                                        _$33 = codeTag1;
                                                                        break _$34;
                                                                    }
                                                                    leftmostParent.unshift(_$33);
                                                                }
                                                            }
                                                        }
                                                        last = current;
                                                    }
                                                }
                                                previous = last;
                                            }
                                            continue;
                                        }
                                    }
                                    break _$25;
                                }
                            if (hasWhereDefinitions) {
                                _$36: {
                                    codeTag2 = ast.fromJsonString('{"id":"<do>","kind":"builtin","val":null,"loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":566,"column":20},"end":{"line":568,"column":4}},"args":[{"id":"<tag>","kind":"tag","val":"unquote1","loc":{"source":"/ssd/massi/metascript/lib/core-macros.mjs","start":{"line":567,"column":8},"end":{"line":568,"column":4}},"args":[]}]}');
                                    codeTag2.replaceTag('unquote1', last.expr);
                                    _$35 = codeTag2;
                                    break _$36;
                                }
                                last.expr = _$35;
                            }
                            last.expr.resolveVirtual();
                            _$22 = last.expr;
                            break _$23;
                        }
                        return _$22;
                    }
                }));
                _$20 = null;
                break _$21;
            }
            _$1 = _$20;
            break _$2;
        }
        return _$1;
    };
}
//# sourceMappingURL=data:application/json;base64,