#defmacro '~`'
  unary
  expand: () -> ()

#defmacro '`'
  unary
  LOW
  doNotExpandChildren: true
  expand: (code) ->
    var result = #quote do
      var \codeTag = #quote code
      tagReplacements
      \codeTag
    var tagReplacements = []
    var unquoteIndex = 1
    code.forEachRecursive
      (child) -> do
        if (child.id == '~`')
          var
            replacement = child.at 0
            replacementName = 'unquote' + unquoteIndex;
            replacementNameVal = child.newValue replacementName
            replacementNameTag = child.newTag replacementName
            tagReplacement = #quote ((\codeTag).replaceTag(quotedTagName, replacement))
          child.replaceWith replacementNameTag
          tagReplacement.replaceTag('quotedTagName', replacementNameVal)
          tagReplacement.replaceTag('replacement', replacement)
          tagReplacements.push tagReplacement
          unquoteIndex += 1
        ()
    result.replaceTag('code', code)
    result.replaceTag('tagReplacements', tagReplacements)
    result.resolveVirtual()
    result

#defmacro 'do!'
  unary
  LOW
  expand: (body) ->
    var statements = body.copy().asTuple()
    var result = `
      do
        ~` statements.map(arg -> arg)
        undefined
    result


#defmacro while
  arity: binaryKeyword
  precedence: LOW
  expand: (condition, body) ->
    ` loop ()
      if (~` condition) do!
        do
          ~` body
        next ()

var x = 3
while (x >= 0)
  console.log x
  x = x - 1
