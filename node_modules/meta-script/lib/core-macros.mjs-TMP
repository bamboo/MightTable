#external module

module.exports = (ast) -> do (
#meta
  console.log('OUTER META START: ' + ast.toString())
  #meta
    console.log('INNER META START: ' + ast.toString())
    var buildMacroArguments = (nameAst, argsTuple) ->
      if (!(argsTuple.isTuple()))
        argsTuple.error 'Expected tuple argument'
        return null
      var
        ok = true
        name = nameAst.getSimpleValue()
        arity = 'unary'
        precedence = 'LOW'
        options = {}
      if (name == null) do
        nameAst.error 'Invalid name'
        return null
      loop (var index = 0)
        if (index < argsTuple.count)
          var arg = argsTuple.at index
          var simpleValue = arg.getSimpleValue()
          if (simpleValue != null)
            if (index == 0)
              arity = simpleValue
            else if (index == 1)
              precedence = simpleValue
            else
              arg.error('Invalid simple property')
              ok = false
          else if (arg.isProperty())
            var property = arg.getPropertyValue()
            if (property != null)
              options[property.key] = property.value
            else
              arg.error('Malformed property')
              ok = false
          else
            arg.error('Invalid property')
            ok = false
          next index + 1
      if ok [name, arity, precedence, options] else null

    ast.defineSymbol
      ast.createMacro
        '#defmacro'
        'binaryKeyword'
        'LOW'
        {
          preExpand: (ast) ->
            if (!(ast.count == 2 && (ast.at 1).isTuple())) do
              ast.error('Expected arguments: name and properties')
              return null
            var args = buildMacroArguments(ast.at 0, ast.at 1)
            if (args != null)
              ast.defineSymbol
                ast.createMacro(args[0], args[1], args[2], args[3])
            null
        }

    ast.defineSymbol
      ast.createMacro('~`', 'unary', 'LOW', {})
    ast.defineSymbol
      ast.createMacro
        '`'
        'unary'
        'LOW'
        {
          ;subordinate: [ast.createMacro('~`', 'unary', 'LOW', {})]
          expand: (ast) ->
            var code = ast.at 0
            var result = #quote do
              var \codeTag = #quote code
              tagReplacements
              \codeTag
            var tagReplacements = []
            var unquoteIndex = 1
            code.forEachRecursive
              (child) -> do
                if (child.id == '~`')
                  var
                    replacement = child.at 0
                    replacementName = 'unquote' + unquoteIndex;
                    replacementNameVal = child.newValue replacementName
                    replacementNameTag = child.newTag replacementName
                    tagReplacement = #quote ((\codeTag).replaceTag(quotedTagName, replacement))
                  child.replaceWith replacementNameTag
                  tagReplacement.replaceTag('quotedTagName', replacementNameVal)
                  tagReplacement.replaceTag('replacement', replacement)
                  tagReplacements.push tagReplacement
                  unquoteIndex += 1
                ()
            result.replaceTag('code', code)
            result.replaceTag('tagReplacements', tagReplacements)
            result.resolveVirtual()
            result
        }

    ; Trick to compile the code twice: in this compilation context and in the enclosing one.
    ; It does the following:
    ; * It removes this last statement from the AST
    ; * It replaces it with a null so that the following expansion will remove it
    ; * It returns (ast.at 0) so that the outer AST will receive this AST
    ast.defineSymbol
      ast.createMacro
        '#closemeta'
        'zero'
        'NONE'
        {
          expand: (ast) -> #quote
            do ((ast.at 0).pop(), (ast.at 0).push(ast.newTag 'null'), ast.at 0)
        }

    console.log 'INNER META END'
    do ((ast.at 0).pop(), (ast.at 0).push(ast.newTag 'null'), ast.at 0)
  console.log 'OUTER META AFTER INNER META'

  #defmacro @
    unary
    HIGH
    expand: (ast) ->
      var member = ast.at 0
      if (member.isTag())
        `this. ~`member
      else
        ` this[~`member]

  console.log('DEFINED: ' + ast.toString())
  ast.keyScope.debugCheckKey('@')

  #closemeta

)
