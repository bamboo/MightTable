Check arity: 
do
  (var fs) = (const require)((#str fs))
  (var path) = (const require)((#str path))
  =
    (var packageRoot)
    ->
      ((arg file))
      loop
        (var dir) = path.dirname(file)
        if
          #cond fs.existsSync(path.join(dir, (#str package.json)))
          dir
          else do
            (var parent) = path.dirname(dir)
            if(parent == dir, (const undefined), else next!(parent))
 *** checkArity (-1:-1): <do>(=(fs, <call>(require, fs)), =(path, <call>(require, path)), =(packageRoot, ->(<tuple>(file), loop(=(dir, <call>(.(path, dirname), file)), if(<call>(.(fs, existsSync), <call>(.(path, join), <tuple>(dir, package.json))), dir, <do>(=(parent, <call>(.(path, dirname), dir)), if(==(parent, dir), undefined, next!(parent))))))))
 *** checkArity (0:-1): =(fs, <call>(require, fs))
 *** checkArity (-1:-1): fs
 *** checkArity (-1:-1): <call>(require, fs)
 *** checkArity (-1:-1): require
 *** checkArity (-1:-1): fs
 *** checkArity (0:-1): =(path, <call>(require, path))
 *** checkArity (-1:-1): path
 *** checkArity (-1:-1): <call>(require, path)
 *** checkArity (-1:-1): require
 *** checkArity (-1:-1): path
 *** checkArity (0:-1): =(packageRoot, ->(<tuple>(file), loop(=(dir, <call>(.(path, dirname), file)), if(<call>(.(fs, existsSync), <call>(.(path, join), <tuple>(dir, package.json))), dir, <do>(=(parent, <call>(.(path, dirname), dir)), if(==(parent, dir), undefined, next!(parent)))))))
 *** checkArity (-1:-1): packageRoot
 *** checkArity (-1:-1): ->(<tuple>(file), loop(=(dir, <call>(.(path, dirname), file)), if(<call>(.(fs, existsSync), <call>(.(path, join), <tuple>(dir, package.json))), dir, <do>(=(parent, <call>(.(path, dirname), dir)), if(==(parent, dir), undefined, next!(parent))))))
 *** checkArity (-1:-1): loop(=(dir, <call>(.(path, dirname), file)), if(<call>(.(fs, existsSync), <call>(.(path, join), <tuple>(dir, package.json))), dir, <do>(=(parent, <call>(.(path, dirname), dir)), if(==(parent, dir), undefined, next!(parent)))))
 *** checkArity (-1:-1): dir
 *** checkArity (-1:-1): <call>(.(path, dirname), file)
 *** checkArity (-1:-1): .(path, dirname)
 *** checkArity (-1:-1): path
 *** checkArity (-1:-1): file
 *** checkArity (1:1): if(<call>(.(fs, existsSync), <call>(.(path, join), <tuple>(dir, package.json))), dir, give!(<do>(=(parent, <call>(.(path, dirname), dir)), if(==(parent, dir), undefined, next!(parent)))))
 *** checkArity (-1:-1): <call>(.(fs, existsSync), <call>(.(path, join), <tuple>(dir, package.json)))
 *** checkArity (-1:-1): .(fs, existsSync)
 *** checkArity (-1:-1): fs
 *** checkArity (-1:-1): <call>(.(path, join), <tuple>(dir, package.json))
 *** checkArity (-1:-1): .(path, join)
 *** checkArity (-1:-1): path
 *** checkArity (-1:-1): dir
 *** checkArity (-1:-1): package.json
 *** checkArity (1:1): dir
 *** checkArity (1:1): give!(<do>(=(parent, <call>(.(path, dirname), dir)), if(==(parent, dir), undefined, next!(parent))))
 *** checkArity (1:1): <do>(=(parent, <call>(.(path, dirname), dir)), if(==(parent, dir), undefined, next!(parent)))
 *** checkArity (1:1): =(parent, <call>(.(path, dirname), dir))
 *** checkArity (-1:-1): parent
 *** checkArity (-1:-1): <call>(.(path, dirname), dir)
 *** checkArity (-1:-1): .(path, dirname)
 *** checkArity (-1:-1): path
 *** checkArity (-1:-1): dir
 *** checkArity (1:1): give!(if(==(parent, dir), undefined, next!(parent)))
 *** checkArity (1:1): if(==(parent, dir), undefined, next!(parent))
 *** checkArity (-1:-1): ==(parent, dir)
 *** checkArity (-1:-1): parent
 *** checkArity (-1:-1): dir
 *** checkArity (1:1): undefined
 *** checkArity (1:1): next!(parent)
 *** checkArity (1:1): parent
Errors:
error [13,7]: Void expression used where a value is required
error [10,5]: Void expression used where a value is required
