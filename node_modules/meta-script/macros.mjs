
#metamodule
  var inspect = (require 'util').inspect

  var apply-selectors = (expr, selectors) ->
    var result = expr.copy()
    loop (var i = 0)
      if (i < selectors.length)
        var selector = selectors[i].copy()
        if (selector.value?())
          result = `((~` result) [~` selector])
        else if (selector.tag?())
          result = `((~` result) . (~` selector))
        else
          selector.error 'Invalid destructuring selector'
        next! i + 1
    result


  var build-deconstructed-assignment = assignment ->
    var value = assignment.pop()
    var pattern = assignment.pop()

    var deconstruct-pattern = pattern ->
      var result = []
      if (pattern.object?()) do!
        pattern.for-each #-> do!
          if (#it.property?())
            var key = (#it.at 0).copy()
            var member-values = deconstruct-pattern(#it.at 1)
            member-values.for-each #->
              #it.selectors.unshift key
              result.push #it
          else
            #it.error 'Property expected'
      else if (pattern.array?()) do!
        loop (var i = 0)
          if (i < pattern.count)
            var element = pattern.at i
            var element-values = deconstruct-pattern(element)
            element-values.for-each
              #-> do!
                if (! (element.tag?() && element.get-tag() == 'undefined'))
                  #it.selectors.unshift (element.new-value i)
                  result.push #it
            next! (i + 1)
      else
        result.push {selectors: [], value: pattern.copy()}
      result

    var deconstructed-pattern = deconstruct-pattern pattern
    var result-left = assignment.new-tuple()
    var result-right = assignment.new-tuple()

    var tmp-value = ` \tmp-value
    deconstructed-pattern.for-each #->
      result-left.push <- #it.value
      var right = tmp-value.copy()
      while (#it.selectors.length > 0)
        var selector = #it.selectors.shift()
        if (selector.value?())
          right = `( (~`right) [~` selector])
        else if (selector.tag?())
          right = `( (~`right) . (~` selector))
        else do
          selector.error 'Invalid destructuring selector'
          right = `( (~`right) [undefined])
      result-right.push right
    assignment.push result-left
    assignment.push result-right

    var result = ` do
      var \tmp-value = ~` value
      ~` assignment
      \tmp-value
    result.resolve-virtual()
    result


  var build-pattern-test = pattern ->
    var process-pattern = pattern ->
      var result = []
      if (pattern.object?()) do!
        pattern.for-each #-> do!
          if (#it.property?())
            result.push {
              selector: (#it.at 0).copy()
              children: process-pattern(#it.at 1)
            }
          else
            #it.error 'Property expected'
      else if (pattern.array?()) do!
        loop (var i = 0)
          if (i < pattern.count)
            var element = pattern.at i
            if (! (element.tag?() && element.get-tag() == 'undefined'))
              result.push {
                selector: pattern.new-value i
                children: process-pattern(element)
              }
            next! i + 1
      result

    var test-tree = process-pattern pattern

    console.log 'TEST TREE START'
    var test-tree-printer = (node, indent) ->
      if (indent == undefined)
        indent = ''
      node.for-each #->
        console.log <- indent + 'selector: ' + #it.selector
        test-tree-printer
          #it.children
          indent + '  '
    test-tree-printer test-tree
    console.log 'TEST TREE END'

    var tests = []
    var var-index = 0
    var process-test-tree = (var-name, selector, tree-node) ->

      ; console.log <- '  NODE: ' + inspect tree-node

      var needs-deep-check = tree-node.length > 0
      var-index ++
      var var-expr = pattern.new-virtual-tag var-name
      if (selector != null)
        if (selector.value?())
          var-expr = `( (~`var-expr) [~` selector])
        else if (selector.tag?())
          var-expr = `( (~`var-expr) . (~` selector))
        else do
          selector.error 'Invalid destructuring selector'
          var-expr = `( (~`var-expr) [undefined])
      var new-var-name = 'dstrct-tmp-' + var-index
      var test =
        if needs-deep-check do
          var new-var-expr = pattern.new-virtual-tag new-var-name
          ` #no-new-scope do
              (~` new-var-expr.copyToTagDeclaration()) = (~` var-expr)
              ((typeof(~` new-var-expr)) != 'undefined' && (\ ~` new-var-expr) != null)
        else
          ` ((typeof(~` var-expr)) != undefined)
      tests.push test
      tree-node.for-each #->
        process-test-tree
          new-var-name
          #it.selector
          #it.children


    console.log <- 'PROCESSING TREE: ' + test-tree.length

    process-test-tree
      'initial-value'
      null
      test-tree
    var result = tests[0]
    loop (var i = 1)
      if (i < tests.length)
        result = ` (~` result) && (~` tests[i])
        next! i + 1
    result.resolve-virtual()
    result


  var old-object-symbol = ast.resolve-in-parent-key-scope '<object>'
  var new-object-symbol = ast.create-extension
    old-object-symbol
    ast ->
      var properties = ast.map #->
        if (#it.property?())
          #it
        else if (#it.tag?())
          ` (~` #it) : (~` #it)
        else do
          var m = #it
          while (m.member?())
            m = m.at 1
          if (m.tag?())
            ` (~` m) : (~` #it)
          else do
            #it.error 'Invalid property'
            ` undefined
      `{ (~` properties) }
  ast.defineSymbol new-object-symbol

  #keepmacro #deconstruct
    unary
    LOW
    expand: (arg) ->
      console.log <- 'DECONSTRUCT EXPR: ' + arg.print-ast()
      var result = ast.compiler.meta-env.deconstruct arg
      console.log <- 'DECONSTRUCT DONE: ' + result.print-ast()
      null

  #keepmacro #test-pattern
    unary
    LOW
    expand: (arg) ->
      console.log <- 'TEST PATTERN EXPR: ' + arg.print-ast()
      var result = ast.compiler.meta-env.test-pattern arg
      console.log <- 'TEST PATTERN DONE: ' + result.print-ast()
      null

  ast.compiler.meta-env.deconstruct = build-deconstructed-assignment
  ast.compiler.meta-env.test-pattern = build-pattern-test
