{"version":3,"sources":["/data/massi/metascript/lib/core-macros.mjs"],"names":["module","exports","ast","composeMacroArguments","nameArg","argsTuple","nameValue","getSimpleValue","null","error","isTuple","ok","true","name","newValue","arity","precedence","options","newObjectLiteral","index","count","arg","at","simpleValue","false","isProperty","skip","property","copy","value","propertyName","simplePropertyValue","isFunctionDefinition","func","macroBody","pop","asTuple","macroArgs","push","newTag","argIndex","macroArg","isTag","argDeclaration","fromJsonString","replaceTag","getTag","handleAsTagDeclaration","unshift","_$22","_$4","defineSymbol","createMacro","code","innerDo","newDo","newMeta","tail","args","result","_$7","definition","sym","keyScope","get","undefined","tagReplacements","unquoteIndex","forEachRecursive","child","id","replacement","replacementName","replacementNameVal","replacementNameTag","tagReplacement","replaceWith","_$8","resolveVirtual","_$6","body","statements","codeTag0","map","_$9","_$10","moduleName","moduleString","_$11","_$13","condition","_$12","following","start","current","others","getLeftmost","root","isCall","isMember","_$14","other","shift","otherLeftmost","parent","_$18","otherParent","codeTag1","_$21","callee","isPlaceholder","newTuple","processNext","n","currentId","currentArgName","node","handleAsFunctionArgument","rhs","lhs","traverser","__$arg$1","forEach","_$16","expr","_$17","isValue","set","getValue","_$15","_$1"],"mappings":"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","sourcesContent":["#external module\n\nmodule.exports = (ast) -> do (\n\n#meta\n  var composeMacroArguments = (nameArg, argsTuple) ->\n    var nameValue = nameArg.getSimpleValue()\n    if (nameValue == null)\n      argsTuple.error 'Invalid name argument'\n      return null\n    if (!(argsTuple.isTuple()))\n      argsTuple.error 'Expected tuple argument'\n      return null\n    var\n      ok = true\n      name = nameArg.newValue nameValue\n      arity = ast.newValue 'unary'\n      precedence = ast.newValue 'LOW'\n      options = ast.newObjectLiteral()\n    loop (var index = 0)\n      if (index < argsTuple.count)\n        var arg = argsTuple.at index\n        var simpleValue = arg.getSimpleValue()\n        if (simpleValue != null)\n          if (index == 0)\n            arity = arg.newValue simpleValue\n          else if (index == 1)\n            precedence = arg.newValue simpleValue\n          else\n            arg.error('Invalid simple property')\n            ok = false\n        else if (arg.isProperty())\n          var skip = false\n          var property = arg.copy()\n          var value = property.at 1\n          var propertyName = (property.at 0).getSimpleValue()\n          var simplePropertyValue = value.getSimpleValue()\n          if (propertyName == 'arity' && simplePropertyValue != null)\n            arity = arg.newValue simplePropertyValue\n            skip = true\n          else if (propertyName == 'precedence' && simplePropertyValue != null)\n            precedence = arg.newValue simplePropertyValue\n            skip = true\n          else if (value.isFunctionDefinition())\n            var func = value.copy()\n            var macroBody = func.pop().asTuple()\n            var macroArgs = func.pop().asTuple()\n            func .push(arg.newTag 'ast')\n            func.push macroBody\n            loop (var argIndex = 0)\n              if (argIndex < macroArgs.count)\n                var macroArg = macroArgs.at argIndex\n                if (macroArg.isTag())\n                  var argDeclaration = #quote var __argName = ast.at __argIndex\n                  argDeclaration.replaceTag('__argName', (macroArg.newTag(macroArg.getTag())).handleAsTagDeclaration())\n                  argDeclaration.replaceTag('__argIndex', macroArg.newValue(argIndex))\n                  macroBody.unshift argDeclaration\n                else\n                  macroArg.error 'Argument name expected'\n                  ok = false\n                next! argIndex + 1\n            if ok\n              property.pop()\n              property.push func\n          if (!skip)\n            options.push property\n        else\n          arg.error('Invalid property')\n          ok = false\n        next! index + 1\n    if ok [name, arity, precedence, options] else null\n\n  ast.defineSymbol\n    ast.createMacro\n      '#exec-meta'\n      'unary'\n      'LOW'\n      {\n        postCombine: (ast) ->\n          var code = (ast.at 0).copy()\n          var innerDo = ast.newDo([code.copy(), ast.newTag 'null'])\n          ast.newMeta innerDo\n      }\n  ast.defineSymbol\n    ast.createMacro\n      '#keep-meta'\n      'unary'\n      'LOW'\n      {\n        postCombine: (ast) ->\n          var code = (ast.at 0).copy()\n          var tail = #quote (ast.at(0).at(0).copy())\n          var innerDo = ast.newDo([code.copy(), tail])\n          ast.newMeta innerDo\n      }\n\n  ast.defineSymbol\n    ast.createMacro\n      '#macro'\n      'binaryKeyword'\n      'LOW'\n      {\n        expand: (ast) ->\n          if (!ast.count == 2) do\n            ast.error('Expected arguments: name and properties')\n            return null\n          var argsTuple = (ast.at 1).asTuple()\n          var args = composeMacroArguments(ast.at 0, argsTuple)\n          if (args != null) do\n            var result = #quote (ast.createMacro(__arg0, __arg1, __arg2, __arg3))\n            result.replaceTag('__arg0', args[0])\n            result.replaceTag('__arg1', args[1])\n            result.replaceTag('__arg2', args[2])\n            result.replaceTag('__arg3', args[3])\n            result\n          else\n            null\n      }\n  ast.defineSymbol\n    ast.createMacro\n      '#defmacro'\n      'binaryKeyword'\n      'LOW'\n      {\n        postCombine: (ast) ->\n          if (!ast.count == 2) do\n            ast.error('Expected arguments: name and properties')\n            return null\n          var argsTuple = (ast.at 1).asTuple()\n          var args = composeMacroArguments(ast.at 0, argsTuple)\n          if (args != null) do\n            var definition = #quote (ast.defineSymbol(ast.createMacro(__arg0, __arg1, __arg2, __arg3)), null)\n            definition.replaceTag('__arg0', args[0])\n            definition.replaceTag('__arg1', args[1])\n            definition.replaceTag('__arg2', args[2])\n            definition.replaceTag('__arg3', args[3])\n            ast.newMeta(ast.newDo(definition))\n          else\n            null\n      }\n  ast.defineSymbol\n    ast.createMacro\n      '#keepmacro'\n      'binaryKeyword'\n      'LOW'\n      {\n        postCombine: (ast) ->\n          if (!ast.count == 2) do\n            ast.error('Expected arguments: name and properties')\n            return null\n          var argsTuple = (ast.at 1).asTuple()\n          var args = composeMacroArguments(ast.at 0, argsTuple)\n          if (args != null) do\n            var definition = #quote (ast.defineSymbol(ast.createMacro(__arg0, __arg1, __arg2, __arg3)), null)\n            definition.replaceTag('__arg0', args[0])\n            definition.replaceTag('__arg1', args[1])\n            definition.replaceTag('__arg2', args[2])\n            definition.replaceTag('__arg3', args[3])\n            var result = ast.newMeta(ast.newDo(definition))\n            result.sym = ast.keyScope.get '#keep-meta'\n            result\n          else\n            null\n      }\n\n  ; Trick to compile the code twice: in this compilation context and for the generated JS.\n  ; It removes this last statement from the code (so that it does not appear in the generated\n  ; file) but makes so that the top level #meta keeps the code (by returning ast.at 0).\n  do ((ast.at 0).pop(), ast.at 0)\n\n#keepmacro '~`'\n  unary\n  expand: () -> ()\n\n#keepmacro '`'\n  unary\n  LOW\n  doNotExpandChildren: true\n  expand: (code) ->\n    var result = #quote do\n      var \\codeTag = #quote code\n      tagReplacements\n      \\codeTag\n    var tagReplacements = []\n    var unquoteIndex = 1\n    code.forEachRecursive\n      (child) -> do\n        if (child.id == '~`')\n          var\n            replacement = child.at 0\n            replacementName = 'unquote' + unquoteIndex;\n            replacementNameVal = child.newValue replacementName\n            replacementNameTag = child.newTag replacementName\n            tagReplacement = #quote ((\\codeTag).replaceTag(quotedTagName, replacement))\n          child.replaceWith replacementNameTag\n          tagReplacement.replaceTag('quotedTagName', replacementNameVal)\n          tagReplacement.replaceTag('replacement', replacement)\n          tagReplacements.push tagReplacement\n          unquoteIndex += 1\n        ()\n    result.replaceTag('code', code)\n    result.replaceTag('tagReplacements', tagReplacements)\n    result.resolveVirtual()\n    result\n\n#keepmacro 'do!'\n  unary\n  LOW\n  expand: (body) ->\n    var statements = body.copy().asTuple()\n    var result = `\n      do\n        ~` statements.map(arg -> arg)\n        undefined\n    result\n\n#keepmacro '#metamodule'\n  unary\n  LOW\n  expand: (body) ->\n    `\n      #external module\n      module.exports = (ast) ->\n        do\n          do\n            ~` body\n          null\n\n#keepmacro #metaimport\n  arity: unary\n  precedence: LOW\n  postCombine: (moduleName) ->\n    var moduleString = moduleName.getSimpleValue()\n    if (typeof moduleString != 'string') do\n      moduleName.error 'Invalid module name'\n      null\n    else\n      moduleName.newMeta\n        `\n          try\n            var metaRequire = (require 'require-like')(ast.compiler.parser.source)\n            (metaRequire ~`(moduleName.newValue moduleString)) (ast)\n          catch (var e)\n            ast.error('Error importing module: ' + e.toString())\n          null\n\n#keepmacro while\n  arity: binaryKeyword\n  precedence: LOW\n  expand: (condition, body) ->\n    ` loop ()\n      if (~` condition) do\n        do\n          ~` body\n        next! ()\n\n#keepmacro .->\n  arity: binary\n  precedence: MEMBER\n  expand: (start, following) ->\n    var\n      current = start\n      others = following.asTuple()\n      get-leftmost = (root) ->\n        while (root.isCall() || root.isMember())\n          root = root.at 0\n        root\n    while (others.count > 0)\n      var\n        other = others.shift()\n        other-leftmost = get-leftmost other\n      current =\n        if (other-leftmost.parent == null)\n          ` (~`current).(~`other-leftmost)\n        else do\n          var other-parent = other-leftmost.parent\n          other-parent.shift()\n          other-parent.unshift(` (~`current).(~`other-leftmost))\n          other\n    current\n\n#keepmacro <-\n  arity: binary\n  precedence: MEDIUM\n  expand: (callee, args) ->\n    ` (~`callee)(~`args)\n\n'''\n#keepmacro @\n  unary\n  HIGH\n  expand: member ->\n    if (member.tag?())\n      `this. ~`member\n    else if (member.array?())\n      if (member.count == 0)\n        `this\n      else if (member.count == 1)\n        `this[~`member]\n      else do\n        member.error 'Member operator accepts only one operand'\n        `undefined\n    else\n      `this[~`member]\n'''\n\n#keepmacro #->\n  unary\n  LOW\n  expand: (body) ->\n    if (typeof body == 'undefined' || (body.isPlaceholder() && body.getSimpleValue() == null))\n      body = ast.newTag 'undefined'\n    var args = ast.newTuple()\n    var process-next = true\n    loop (var n = 1)\n      if process-next\n        process-next = false\n        var\n          current-id = '#' + n\n          current-arg-name = '__$arg$' + n\n        body.forEachRecursive\n          node -> do!\n            if (node.isPlaceholder() && (node.getSimpleValue() == current-id || (n == 1 && node.getSimpleValue() == '#it')))\n              if (!process-next)\n                process-next = true;\n                args.push((ast.newTag current-arg-name).handleAsFunctionArgument())\n              node.replaceWith(node.newTag current-arg-name)\n        next! n + 1\n    `(~` args) -> (~` body)\n\n\n; Fat arrow, binds `this` to the function's lexical context\n#keepmacro =>\n  arity: binary\n  precedence: FUNCTION\n  left-precedence: 'FUNCTION-LEFT'\n  expand: (lhs, rhs) ->\n    var traverser = #-> do!\n      if (#it.isTag() && #it.getTag() == 'this')\n        #it.replaceWith ` \\captured-this\n      if (! #it.function-definition?())\n        #it.for-each #-> traverser #it\n    traverser rhs\n    var result = ` do\n      var \\captured-this = this\n      (~` lhs) -> (~` rhs)\n    result.resolveVirtual()\n    result\n\n#keepmacro #js\n'''\n  Same as eval but for literal values allows to directly embed it in the\n  generated javascript code.\n\n  Usage: js'bar ? 1 : -1'\n'''\n  unary\n  HIGH\n  expand: (expr) ->\n    var code = ` (#external eval)( ~`(expr) )\n    if (expr.value?())\n      code.set('js', expr.get-value())\n    code\n\n#keepmacro #no-new-scope\n  unary\n  LOW\n  expand: (expr) ->\n    expr.set('no-new-scope', true)\n    expr\n\n\nnull\n)\n\n"]}