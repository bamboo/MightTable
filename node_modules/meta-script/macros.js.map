{"version":3,"sources":["macros.mjs"],"names":["module","exports","ast","inspect","require","applySelectors","expr","selectors","result","copy","i","true","length","selector","isValue","codeTag0","fromJsonString","replaceTag","_$8","isTag","codeTag1","_$10","error","_$4","buildDeconstructedAssignment","assignment","value","pop","pattern","deconstructPattern","isObject","forEach","__$arg$1","isProperty","key","at","memberValues","unshift","_$12","push","_$9","undefined","isArray","count","element","elementValues","getTag","newValue","_$6","deconstructedPattern","resultLeft","newTuple","resultRight","tmpValue","right","shift","_$13","codeTag2","_$15","codeTag3","_$18","resolveVirtual","buildPatternTest","processPattern","testTree","console","log","testTreePrinter","node","indent","children","tests","varIndex","processTestTree","varName","treeNode","needsDeepCheck","varExpr","newVirtualTag","null","newVarName","newVarExpr","copyToTagDeclaration","_$17","codeTag4","test","oldObjectSymbol","resolveInParentKeyScope","newObjectSymbol","createExtension","properties","map","m","isMember","defineSymbol","createMacro","arg","printAst","compiler","metaEnv","deconstruct","_$5","testPattern","_$1"],"mappings":"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","sourcesContent":["\n#metamodule\n  var inspect = (require 'util').inspect\n\n  var apply-selectors = (expr, selectors) ->\n    var result = expr.copy()\n    loop (var i = 0)\n      if (i < selectors.length)\n        var selector = selectors[i].copy()\n        if (selector.value?())\n          result = `((~` result) [~` selector])\n        else if (selector.tag?())\n          result = `((~` result) . (~` selector))\n        else\n          selector.error 'Invalid destructuring selector'\n        next! i + 1\n    result\n\n\n  var build-deconstructed-assignment = assignment ->\n    var value = assignment.pop()\n    var pattern = assignment.pop()\n\n    var deconstruct-pattern = pattern ->\n      var result = []\n      if (pattern.object?()) do!\n        pattern.for-each #-> do!\n          if (#it.property?())\n            var key = (#it.at 0).copy()\n            var member-values = deconstruct-pattern(#it.at 1)\n            member-values.for-each #->\n              #it.selectors.unshift key\n              result.push #it\n          else\n            #it.error 'Property expected'\n      else if (pattern.array?()) do!\n        loop (var i = 0)\n          if (i < pattern.count)\n            var element = pattern.at i\n            var element-values = deconstruct-pattern(element)\n            element-values.for-each\n              #-> do!\n                if (! (element.tag?() && element.get-tag() == 'undefined'))\n                  #it.selectors.unshift (element.new-value i)\n                  result.push #it\n            next! (i + 1)\n      else\n        result.push {selectors: [], value: pattern.copy()}\n      result\n\n    var deconstructed-pattern = deconstruct-pattern pattern\n    var result-left = assignment.new-tuple()\n    var result-right = assignment.new-tuple()\n\n    var tmp-value = ` \\tmp-value\n    deconstructed-pattern.for-each #->\n      result-left.push <- #it.value\n      var right = tmp-value.copy()\n      while (#it.selectors.length > 0)\n        var selector = #it.selectors.shift()\n        if (selector.value?())\n          right = `( (~`right) [~` selector])\n        else if (selector.tag?())\n          right = `( (~`right) . (~` selector))\n        else do\n          selector.error 'Invalid destructuring selector'\n          right = `( (~`right) [undefined])\n      result-right.push right\n    assignment.push result-left\n    assignment.push result-right\n\n    var result = ` do\n      var \\tmp-value = ~` value\n      ~` assignment\n      \\tmp-value\n    result.resolve-virtual()\n    result\n\n\n  var build-pattern-test = pattern ->\n    var process-pattern = pattern ->\n      var result = []\n      if (pattern.object?()) do!\n        pattern.for-each #-> do!\n          if (#it.property?())\n            result.push {\n              selector: (#it.at 0).copy()\n              children: process-pattern(#it.at 1)\n            }\n          else\n            #it.error 'Property expected'\n      else if (pattern.array?()) do!\n        loop (var i = 0)\n          if (i < pattern.count)\n            var element = pattern.at i\n            if (! (element.tag?() && element.get-tag() == 'undefined'))\n              result.push {\n                selector: pattern.new-value i\n                children: process-pattern(element)\n              }\n            next! i + 1\n      result\n\n    var test-tree = process-pattern pattern\n\n    console.log 'TEST TREE START'\n    var test-tree-printer = (node, indent) ->\n      if (indent == undefined)\n        indent = ''\n      node.for-each #->\n        console.log <- indent + 'selector: ' + #it.selector\n        test-tree-printer\n          #it.children\n          indent + '  '\n    test-tree-printer test-tree\n    console.log 'TEST TREE END'\n\n    var tests = []\n    var var-index = 0\n    var process-test-tree = (var-name, selector, tree-node) ->\n\n      console.log <- '  NODE: ' + inspect tree-node\n\n      var needs-deep-check = tree-node.length > 0\n      var-index ++\n      var var-expr = pattern.new-virtual-tag var-name\n      if (selector != null)\n        if (selector.value?())\n          var-expr = `( (~`var-expr) [~` selector])\n        else if (selector.tag?())\n          var-expr = `( (~`var-expr) . (~` selector))\n        else do\n          selector.error 'Invalid destructuring selector'\n          var-expr = `( (~`var-expr) [undefined])\n      var new-var-name = 'dstrct-tmp-' + var-index\n      var test =\n        if needs-deep-check do\n          var new-var-expr = pattern.new-virtual-tag new-var-name\n          ` do\n              (~` new-var-expr.copyToTagDeclaration()) = (~` var-expr)\n              ((typeof(~` new-var-expr)) != 'undefined' && (\\ ~` new-var-expr) != null)\n        else\n          ` ((typeof(~` var-expr)) != undefined)\n      tests.push test\n      tree-node.for-each #->\n        process-test-tree\n          new-var-name\n          #it.selector\n          #it.children\n\n\n    console.log <- 'PROCESSING TREE: ' + test-tree.length\n\n    process-test-tree\n      'initial-value'\n      null\n      test-tree\n    var result = tests[0]\n    loop (var i = 1)\n      if (i < tests.length)\n        result = ` (~` result) && (~` tests[i])\n        next! i + 1\n    result.resolve-virtual()\n    result\n\n\n  var old-object-symbol = ast.resolve-in-parent-key-scope '<object>'\n  var new-object-symbol = ast.create-extension\n    old-object-symbol\n    ast ->\n      var properties = ast.map #->\n        if (#it.property?())\n          #it\n        else if (#it.tag?())\n          ` (~` #it) : (~` #it)\n        else do\n          var m = #it\n          while (m.member?())\n            m = m.at 1\n          if (m.tag?())\n            ` (~` m) : (~` #it)\n          else do\n            #it.error 'Invalid property'\n            ` undefined\n      `{ (~` properties) }\n  ast.defineSymbol new-object-symbol\n\n  #keepmacro #deconstruct\n    unary\n    LOW\n    expand: (arg) ->\n      console.log <- 'DECONSTRUCT EXPR: ' + arg.print-ast()\n      var result = ast.compiler.meta-env.deconstruct arg\n      console.log <- 'DECONSTRUCT DONE: ' + result.print-ast()\n      null\n\n  #keepmacro #test-pattern\n    unary\n    LOW\n    expand: (arg) ->\n      console.log <- 'TEST PATTERN EXPR: ' + arg.print-ast()\n      var result = ast.compiler.meta-env.test-pattern arg\n      console.log <- 'TEST PATTERN DONE: ' + result.print-ast()\n      null\n\n  ast.compiler.meta-env.deconstruct = build-deconstructed-assignment\n  ast.compiler.meta-env.test-pattern = build-pattern-test\n\n"]}